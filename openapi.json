{
  "openapi": "3.0.0",
  "paths": {
    "/v1/health-check": {
      "get": {
        "operationId": "health-check",
        "summary": "Get the health of the service.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Health Check"
        ]
      }
    },
    "/v1/operations/transactions:export": {
      "post": {
        "operationId": "postTransactionExportJob",
        "summary": "[BETA] Trigger a transaction export operation with given parameters.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateEvmTransactionExportRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CreatePrimaryNetworkTransactionExportRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationStatusResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Operations"
        ]
      }
    },
    "/v1/operations/{operationId}": {
      "get": {
        "operationId": "getOperationResult",
        "summary": "Retrieve operation result with given operation id",
        "parameters": [
          {
            "name": "operationId",
            "required": true,
            "in": "path",
            "description": "UUID of given operation",
            "example": "aa22054a-cb7c-4a4e-9b83-59f2ede74138",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationStatusResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Operations"
        ]
      }
    },
    "/v1/chains/{chainId}/addresses/{address}/balances:getNative": {
      "get": {
        "operationId": "getNativeBalance",
        "summary": "Get native token balance of a wallet address for a given chain.",
        "parameters": [
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get \n      a list of supported chain ids.",
            "example": "43114",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "required": false,
            "in": "query",
            "description": "The currency that return values should use. Defaults to USD.",
            "example": "usd",
            "schema": {
              "$ref": "#/components/schemas/CurrencyCode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNativeBalanceResponse"
                }
              }
            }
          }
        },
        "tags": [
          "EVM"
        ]
      }
    },
    "/v1/chains/{chainId}/addresses/{address}/balances:listErc20": {
      "get": {
        "operationId": "listErc20Balances",
        "summary": "List ERC-20 token balances of a wallet address for a given chain.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size\n      is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get \n      a list of supported chain ids.",
            "example": "43114",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "required": false,
            "in": "query",
            "description": "The currency that return values should use. Defaults to USD.",
            "example": "usd",
            "schema": {
              "$ref": "#/components/schemas/CurrencyCode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListErc20BalancesResponse"
                }
              }
            }
          }
        },
        "tags": [
          "EVM"
        ]
      }
    },
    "/v1/chains/{chainId}/addresses/{address}/balances:listErc721": {
      "get": {
        "operationId": "listErc721Balances",
        "summary": "List ERC-721 token balances of a wallet address for a given chain.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size\n      is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get \n      a list of supported chain ids.",
            "example": "43114",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListErc721BalancesResponse"
                }
              }
            }
          }
        },
        "tags": [
          "EVM"
        ]
      }
    },
    "/v1/chains/{chainId}/addresses/{address}/balances:listErc1155": {
      "get": {
        "operationId": "listErc1155Balances",
        "summary": "List ERC-1155 token balances of a wallet address for a given chain.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size\n      is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get \n      a list of supported chain ids.",
            "example": "43114",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListErc1155BalancesResponse"
                }
              }
            }
          }
        },
        "tags": [
          "EVM"
        ]
      }
    },
    "/v1/chains/{chainId}/addresses/{address}/balances:listCollectibles": {
      "get": {
        "operationId": "listCollectibleBalances",
        "summary": "List ERC-721 and ERC-1155 token balances of a wallet address\n        for a given chain.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size\n      is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get \n      a list of supported chain ids.",
            "example": "43114",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCollectibleBalancesResponse"
                }
              }
            }
          }
        },
        "tags": [
          "EVM"
        ]
      }
    },
    "/v1/chains/{chainId}/blocks": {
      "get": {
        "operationId": "getLatestBlocks",
        "summary": "Returns the latest blocks indexed for the chain.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size\n      is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get \n      a list of supported chain ids.",
            "example": "43114",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListBlocksResponse"
                }
              }
            }
          }
        },
        "tags": [
          "EVM"
        ]
      }
    },
    "/v1/chains/{chainId}/blocks/{blockId}": {
      "get": {
        "operationId": "getBlock",
        "summary": "Returns the details of an individual block for the chain.",
        "parameters": [
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get \n      a list of supported chain ids.",
            "example": "43114",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blockId",
            "required": true,
            "in": "path",
            "description": "A block identifier which is either a block number or the block hash.",
            "example": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBlockResponse"
                }
              }
            }
          }
        },
        "tags": [
          "EVM"
        ]
      }
    },
    "/v1/chains/{chainId}/contracts/{address}/transactions:getDeployment": {
      "get": {
        "operationId": "getDeploymentTransaction",
        "summary": "If the address is a smart contract, returns the transaction at which it was deployed.",
        "parameters": [
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get \n      a list of supported chain ids.",
            "example": "43114",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "Contract address on the relevant chain.",
            "example": "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "required": false,
            "in": "query",
            "description": "The currency that return values should use. Defaults to USD.",
            "example": "usd",
            "schema": {
              "$ref": "#/components/schemas/CurrencyCode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionResponse"
                }
              }
            }
          }
        },
        "tags": [
          "EVM"
        ]
      }
    },
    "/v1/chains/{chainId}/tokens/{address}/transfers": {
      "get": {
        "operationId": "listTransfers",
        "summary": "Gets a list of erc transfers for an ERC-20, ERC-721,\n        or ERC-1155 contract address.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size\n      is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get \n      a list of supported chain ids.",
            "example": "43114",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTransfersResponse"
                }
              }
            }
          }
        },
        "tags": [
          "EVM"
        ]
      }
    },
    "/v1/chains/{chainId}/addresses/{address}/transactions": {
      "get": {
        "operationId": "listTransactions",
        "summary": "Gets a list of transactions for an address and chain.",
        "description": "Returns a list of transactions where the given wallet\n        address had an on-chain interaction for a given chain. The ERC-20 \n        transfers, ERC-721 transfers, ERC-1155, and internal transactions\n        returned are only those where the input address had an interaction.\n        Specifically, those list only inlcude entries where the input address\n        was the sender (`from` field) or the receiver (`to` field) for the\n        sub-transaction. Therefore the transactions returned from this list may\n        not be complete representations of the on-chain data. For a complete\n        view of a transaction use the `/chains/:chainId/transactions/:txHash`\n        endpoint.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size\n      is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startBlock",
            "required": false,
            "in": "query",
            "description": "The block range start number, inclusive. If endBlock is not defined when startBlock is defined, the end of the range will be the most recent block.",
            "example": "6479329",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "endBlock",
            "required": false,
            "in": "query",
            "description": "The block range end number, exclusive. If startBlock is not defined when endBlock is defined, the start of the range will be the genesis block.",
            "example": "6479330",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get \n      a list of supported chain ids.",
            "example": "43114",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "example": "asc",
            "description": "The order by which to sort results. Use \"asc\" for ascending\n      order, \"desc\" for descending order. Sorted by timestamp or the `sortBy`\n      query parameter, if provided.",
            "schema": {
              "$ref": "#/components/schemas/SortOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTransactionDetailsResponse"
                }
              }
            }
          }
        },
        "tags": [
          "EVM"
        ]
      }
    },
    "/v1/chains/{chainId}/addresses/{address}/transactions:listNative": {
      "get": {
        "operationId": "listNativeTransactions",
        "summary": "Gets a list of native transactions for an address and chain.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size\n      is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get \n      a list of supported chain ids.",
            "example": "43114",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNativeTransactionsResponse"
                }
              }
            }
          }
        },
        "tags": [
          "EVM"
        ]
      }
    },
    "/v1/chains/{chainId}/addresses/{address}/transactions:listErc20": {
      "get": {
        "operationId": "listErc20Transactions",
        "summary": "Lists ERC-20 transfers for an address.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size\n      is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get \n      a list of supported chain ids.",
            "example": "43114",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListErc20TransactionsResponse"
                }
              }
            }
          }
        },
        "tags": [
          "EVM"
        ]
      }
    },
    "/v1/chains/{chainId}/addresses/{address}/transactions:listErc721": {
      "get": {
        "operationId": "listErc721Transactions",
        "summary": "Lists ERC-721 transfers for an address.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size\n      is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get \n      a list of supported chain ids.",
            "example": "43114",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListErc721TransactionsResponse"
                }
              }
            }
          }
        },
        "tags": [
          "EVM"
        ]
      }
    },
    "/v1/chains/{chainId}/addresses/{address}/transactions:listErc1155": {
      "get": {
        "operationId": "listErc1155Transactions",
        "summary": "Lists of ERC-1155 transfers for an address.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size\n      is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get \n      a list of supported chain ids.",
            "example": "43114",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListErc1155TransactionsResponse"
                }
              }
            }
          }
        },
        "tags": [
          "EVM"
        ]
      }
    },
    "/v1/chains/{chainId}/addresses/{address}/transactions:listInternals": {
      "get": {
        "operationId": "listInternalTransactions",
        "summary": "Lists internal transactions for an address.",
        "description": "Returns a list of internal transactions for an address and\n        chain. Note that the internal transactions list only contains CALL or\n        CALLCODE transactions with a non-zero value and CREATE/CREATE2\n        transactions. To get a complete list of internal transactions use the \n        `debug_` prefixed RPC methods on an archive node.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size\n      is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get \n      a list of supported chain ids.",
            "example": "43114",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "path",
            "description": "A wallet address.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListInternalTransactionsResponse"
                }
              }
            }
          }
        },
        "tags": [
          "EVM"
        ]
      }
    },
    "/v1/chains/{chainId}/transactions/{txHash}": {
      "get": {
        "operationId": "getTransaction",
        "summary": "Gets the details of a single transaction.",
        "parameters": [
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get \n      a list of supported chain ids.",
            "example": "43114",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "txHash",
            "required": true,
            "in": "path",
            "description": "A transaction hash.",
            "example": "0x8bf584d7b14b92a32a339872a66b134a70ba3ba7c305823f348db6f860253f45",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionResponse"
                }
              }
            }
          }
        },
        "tags": [
          "EVM"
        ]
      }
    },
    "/v1/chains/{chainId}/blocks/{blockId}/transactions": {
      "get": {
        "operationId": "getTransactionsForBlock",
        "summary": "Gets the transactions that occured in a given block.",
        "parameters": [
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get \n      a list of supported chain ids.",
            "example": "43114",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blockId",
            "required": true,
            "in": "path",
            "description": "A block identifier which is either a block number or the block hash.",
            "example": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNativeTransactionsResponse"
                }
              }
            }
          }
        },
        "tags": [
          "EVM"
        ]
      }
    },
    "/v1/chains/{chainId}/transactions": {
      "get": {
        "operationId": "listLatestTransactions",
        "summary": "Gets the latest transactions; can be filtered by status.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size\n      is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get \n      a list of supported chain ids.",
            "example": "43114",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "A status filter for listed transactions.",
            "schema": {
              "$ref": "#/components/schemas/TransactionStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNativeTransactionsResponse"
                }
              }
            }
          }
        },
        "tags": [
          "EVM"
        ]
      }
    },
    "/v1/chains": {
      "get": {
        "operationId": "supportedChains",
        "summary": "Gets the list of chains supported by the api.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListChainsResponse"
                }
              }
            }
          }
        },
        "tags": [
          "EVM"
        ]
      }
    },
    "/v1/chains/{chainId}": {
      "get": {
        "operationId": "getChainInfo",
        "summary": "Gets chain information by chain id.",
        "parameters": [
          {
            "name": "chainId",
            "required": true,
            "in": "path",
            "description": "A supported evm chain id. Use the `/chains` endpoint to get \n      a list of supported chain ids.",
            "example": "43114",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetChainResponse"
                }
              }
            }
          }
        },
        "tags": [
          "EVM"
        ]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/transactions/{txHash}": {
      "get": {
        "operationId": "getTxByHash",
        "summary": "Returns the details of the supplied transaction hash.",
        "parameters": [
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead!",
            "example": "p-chain",
            "schema": {
              "$ref": "#/components/schemas/BlockchainId"
            }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": {
              "$ref": "#/components/schemas/Network"
            }
          },
          {
            "name": "txHash",
            "required": true,
            "in": "path",
            "description": "A primary network (P or X chain) transaction hash.",
            "example": "3P91K6nuDFvDodcRuJTsgdf9SvYe5pMiKk38HppsoeAiEztCP",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "p-chain": {
                    "$ref": "#/components/schemas/PChainTransaction"
                  },
                  "x-chain non-linear": {
                    "value": {
                      "txHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c",
                      "txType": "BaseTx",
                      "chainFormat": "non-linear",
                      "timestamp": 1600762738,
                      "memo": "0x546865204176616c616e6368652050726f6a656374",
                      "consumedUtxos": [
                        {
                          "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC",
                          "asset": {
                            "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                            "name": "Avalanche",
                            "symbol": "AVAX",
                            "denomination": 9,
                            "type": "secp256k1",
                            "amount": "235547368713219"
                          },
                          "utxoType": "mint",
                          "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                          "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                          "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                          "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c",
                          "consumingTxTimestamp": 1599696000,
                          "outputIndex": "38",
                          "timestamp": 1599696000,
                          "locktime": 0,
                          "threshold": 1,
                          "addresses": [
                            "avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"
                          ],
                          "credentials": [
                            {
                              "signature": "6bhkPfl1Ulpztm1Qj8cqZwK1kLIBHCzUo79QtDswK/oFWf8ux26l5jugwf27VjUcXJA3bIzAz+bhG0IQTJkazQE",
                              "publicKey": "AnEAbQrj6HV8Zi3Krnt1nIJui0BL5+2lXIVu+WCxD25N"
                            }
                          ]
                        }
                      ],
                      "emittedUtxos": [
                        {
                          "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC",
                          "asset": {
                            "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                            "name": "Avalanche",
                            "symbol": "AVAX",
                            "denomination": 9,
                            "type": "secp256k1",
                            "amount": "235547368713219"
                          },
                          "utxoType": "mint",
                          "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                          "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                          "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                          "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c",
                          "consumingTxTimestamp": 1599696000,
                          "outputIndex": "38",
                          "timestamp": 1599696000,
                          "locktime": 0,
                          "threshold": 1,
                          "addresses": [
                            "avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"
                          ],
                          "credentials": [
                            {
                              "signature": "6bhkPfl1Ulpztm1Qj8cqZwK1kLIBHCzUo79QtDswK/oFWf8ux26l5jugwf27VjUcXJA3bIzAz+bhG0IQTJkazQE",
                              "publicKey": "AnEAbQrj6HV8Zi3Krnt1nIJui0BL5+2lXIVu+WCxD25N"
                            }
                          ]
                        }
                      ],
                      "amountUnlocked": [
                        {
                          "assetId": "5mRYAWkChM7Y2Tpq4cr25RAdRZwXbvoTRKazs7Z5qzA4PUPgh",
                          "name": "Letsee",
                          "symbol": "LETC",
                          "denomination": 0,
                          "type": "nft",
                          "amount": "0"
                        },
                        {
                          "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                          "name": "Avalanche",
                          "symbol": "AVAX",
                          "denomination": 9,
                          "type": "secp256k1",
                          "amount": "18650252"
                        }
                      ],
                      "amountCreated": [
                        {
                          "assetId": "5mRYAWkChM7Y2Tpq4cr25RAdRZwXbvoTRKazs7Z5qzA4PUPgh",
                          "name": "Letsee",
                          "symbol": "LETC",
                          "denomination": 0,
                          "type": "nft",
                          "amount": "0"
                        },
                        {
                          "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                          "name": "Avalanche",
                          "symbol": "AVAX",
                          "denomination": 9,
                          "type": "secp256k1",
                          "amount": "8650252"
                        }
                      ],
                      "vertices": [
                        {
                          "hash": "82qPRREHmh8Cfta4PGD6GymY9ZLyvgYugqW6hj9FykpMVRz1S",
                          "height": 1961,
                          "timestamp": 1600762738
                        }
                      ]
                    }
                  },
                  "x-chain linear": {
                    "value": {
                      "txHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c",
                      "txType": "BaseTx",
                      "chainFormat": "linear",
                      "timestamp": 1600762738,
                      "memo": "0x546865204176616c616e6368652050726f6a656374",
                      "consumedUtxos": [
                        {
                          "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC",
                          "asset": {
                            "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                            "name": "Avalanche",
                            "symbol": "AVAX",
                            "denomination": 9,
                            "type": "secp256k1",
                            "amount": "235547368713219"
                          },
                          "utxoType": "mint",
                          "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                          "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                          "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                          "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c",
                          "consumingTxTimestamp": 1599696000,
                          "outputIndex": "38",
                          "timestamp": 1599696000,
                          "locktime": 0,
                          "threshold": 1,
                          "addresses": [
                            "avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"
                          ],
                          "credentials": [
                            {
                              "signature": "6bhkPfl1Ulpztm1Qj8cqZwK1kLIBHCzUo79QtDswK/oFWf8ux26l5jugwf27VjUcXJA3bIzAz+bhG0IQTJkazQE",
                              "publicKey": "AnEAbQrj6HV8Zi3Krnt1nIJui0BL5+2lXIVu+WCxD25N"
                            }
                          ]
                        }
                      ],
                      "emittedUtxos": [
                        {
                          "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC",
                          "asset": {
                            "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                            "name": "Avalanche",
                            "symbol": "AVAX",
                            "denomination": 9,
                            "type": "secp256k1",
                            "amount": "235547368713219"
                          },
                          "utxoType": "mint",
                          "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                          "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                          "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                          "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c",
                          "consumingTxTimestamp": 1599696000,
                          "outputIndex": "38",
                          "timestamp": 1599696000,
                          "locktime": 0,
                          "threshold": 1,
                          "addresses": [
                            "avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"
                          ],
                          "credentials": [
                            {
                              "signature": "6bhkPfl1Ulpztm1Qj8cqZwK1kLIBHCzUo79QtDswK/oFWf8ux26l5jugwf27VjUcXJA3bIzAz+bhG0IQTJkazQE",
                              "publicKey": "AnEAbQrj6HV8Zi3Krnt1nIJui0BL5+2lXIVu+WCxD25N"
                            }
                          ]
                        }
                      ],
                      "amountUnlocked": [
                        {
                          "assetId": "5mRYAWkChM7Y2Tpq4cr25RAdRZwXbvoTRKazs7Z5qzA4PUPgh",
                          "name": "Letsee",
                          "symbol": "LETC",
                          "denomination": 0,
                          "type": "nft",
                          "amount": "0"
                        },
                        {
                          "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                          "name": "Avalanche",
                          "symbol": "AVAX",
                          "denomination": 9,
                          "type": "secp256k1",
                          "amount": "18650252"
                        }
                      ],
                      "amountCreated": [
                        {
                          "assetId": "5mRYAWkChM7Y2Tpq4cr25RAdRZwXbvoTRKazs7Z5qzA4PUPgh",
                          "name": "Letsee",
                          "symbol": "LETC",
                          "denomination": 0,
                          "type": "nft",
                          "amount": "0"
                        },
                        {
                          "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                          "name": "Avalanche",
                          "symbol": "AVAX",
                          "denomination": 9,
                          "type": "secp256k1",
                          "amount": "8650252"
                        }
                      ],
                      "blockHash": "82qPRREHmh8Cfta4PGD6GymY9ZLyvgYugqW6hj9FykpMVRz1S",
                      "blockHeight": 1005
                    }
                  },
                  "c-chain export": {
                    "value": {
                      "txHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c",
                      "blockHeight": 1005,
                      "blockHash": "0x57a5cb7704561d1d59bd563b6421021b7563960c05ba3ae0e36fc36917c742ee",
                      "timestamp": 1600762738,
                      "memo": "0x546865204176616c616e6368652050726f6a656374",
                      "sourceChain": "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5",
                      "destinationChain": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                      "txType": "ExportTx",
                      "evmInputs": [
                        {
                          "fromAddress": "0xD0f2898e49d941D6d479B381d3C8F0bd8d983b4c",
                          "asset": {
                            "assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof",
                            "name": "Avalanche",
                            "symbol": "AVAX",
                            "denomination": 9,
                            "type": "secp256k1",
                            "amount": "5001000"
                          }
                        }
                      ],
                      "emittedUtxos": [
                        {
                          "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC",
                          "asset": {
                            "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                            "name": "Avalanche",
                            "symbol": "AVAX",
                            "denomination": 9,
                            "type": "secp256k1",
                            "amount": "235547368713219"
                          },
                          "utxoType": "mint",
                          "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                          "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                          "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                          "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c",
                          "consumingTxTimestamp": 1599696000,
                          "outputIndex": "38",
                          "timestamp": 1599696000,
                          "locktime": 0,
                          "threshold": 1,
                          "addresses": [
                            "avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"
                          ],
                          "credentials": [
                            {
                              "signature": "6bhkPfl1Ulpztm1Qj8cqZwK1kLIBHCzUo79QtDswK/oFWf8ux26l5jugwf27VjUcXJA3bIzAz+bhG0IQTJkazQE",
                              "publicKey": "AnEAbQrj6HV8Zi3Krnt1nIJui0BL5+2lXIVu+WCxD25N"
                            }
                          ]
                        }
                      ],
                      "amountUnlocked": [
                        {
                          "assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof",
                          "name": "Avalanche",
                          "symbol": "AVAX",
                          "denomination": 9,
                          "type": "secp256k1",
                          "amount": "5001000"
                        }
                      ],
                      "amountCreated": [
                        {
                          "assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof",
                          "name": "Avalanche",
                          "symbol": "AVAX",
                          "denomination": 9,
                          "type": "secp256k1",
                          "amount": "5001000"
                        }
                      ]
                    }
                  },
                  "c-chain import": {
                    "value": {
                      "txHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c",
                      "blockHeight": 1005,
                      "blockHash": "0x57a5cb7704561d1d59bd563b6421021b7563960c05ba3ae0e36fc36917c742ee",
                      "timestamp": 1600762738,
                      "memo": "0x546865204176616c616e6368652050726f6a656374",
                      "sourceChain": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                      "destinationChain": "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5",
                      "txType": "ImportTx",
                      "evmOutputs": [
                        {
                          "toAddress": "0xD0f2898e49d941D6d479B381d3C8F0bd8d983b4c",
                          "asset": {
                            "assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof",
                            "name": "Avalanche",
                            "symbol": "AVAX",
                            "denomination": 9,
                            "type": "secp256k1",
                            "amount": "5001000"
                          }
                        }
                      ],
                      "consumedUtxos": [
                        {
                          "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC",
                          "asset": {
                            "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                            "name": "Avalanche",
                            "symbol": "AVAX",
                            "denomination": 9,
                            "type": "secp256k1",
                            "amount": "235547368713219"
                          },
                          "utxoType": "mint",
                          "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                          "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                          "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                          "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c",
                          "consumingTxTimestamp": 1599696000,
                          "outputIndex": "38",
                          "timestamp": 1599696000,
                          "locktime": 0,
                          "threshold": 1,
                          "addresses": [
                            "avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"
                          ],
                          "credentials": [
                            {
                              "signature": "6bhkPfl1Ulpztm1Qj8cqZwK1kLIBHCzUo79QtDswK/oFWf8ux26l5jugwf27VjUcXJA3bIzAz+bhG0IQTJkazQE",
                              "publicKey": "AnEAbQrj6HV8Zi3Krnt1nIJui0BL5+2lXIVu+WCxD25N"
                            }
                          ]
                        }
                      ],
                      "amountUnlocked": [
                        {
                          "assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof",
                          "name": "Avalanche",
                          "symbol": "AVAX",
                          "denomination": 9,
                          "type": "secp256k1",
                          "amount": "5001000"
                        }
                      ],
                      "amountCreated": [
                        {
                          "assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof",
                          "name": "Avalanche",
                          "symbol": "AVAX",
                          "denomination": 9,
                          "type": "secp256k1",
                          "amount": "5001000"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PChainTransaction"
                    },
                    {
                      "$ref": "#/components/schemas/XChainNonLinearTransaction"
                    },
                    {
                      "$ref": "#/components/schemas/XChainLinearTransaction"
                    },
                    {
                      "$ref": "#/components/schemas/CChainExportTransaction"
                    },
                    {
                      "$ref": "#/components/schemas/CChainImportTransaction"
                    }
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Primary Network"
        ]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/transactions": {
      "get": {
        "operationId": "listLatestPrimaryNetworkTransactions",
        "summary": "Returns latest transactions. If addresses are supplied, returns transactions for those addresses.",
        "parameters": [
          {
            "name": "addresses",
            "required": false,
            "in": "query",
            "description": "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"avax\"/\"fuji\", \"P-avax\"/\"P-fuji\" or \"X-avax\"/\"X-fuji\".",
            "example": "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size\n      is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead!",
            "example": "p-chain",
            "schema": {
              "$ref": "#/components/schemas/BlockchainId"
            }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": {
              "$ref": "#/components/schemas/Network"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "example": "asc",
            "description": "The order by which to sort results. Use \"asc\" for ascending\n      order, \"desc\" for descending order. Sorted by timestamp or the `sortBy`\n      query parameter, if provided.",
            "schema": {
              "$ref": "#/components/schemas/SortOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "p-chain": {
                    "$ref": "#/components/schemas/ListPChainTransactionsResponse"
                  },
                  "x-chain": {
                    "value": {
                      "nextPageToken": "MjAyMy0wMy0xNCAxNjoyNjoxOCswMHw0MDQ5NjQw",
                      "transactions": [
                        {
                          "txHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c",
                          "txType": "BaseTx",
                          "chainFormat": "non-linear",
                          "timestamp": 1600762738,
                          "memo": "0x546865204176616c616e6368652050726f6a656374",
                          "consumedUtxos": [
                            {
                              "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC",
                              "asset": {
                                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                                "name": "Avalanche",
                                "symbol": "AVAX",
                                "denomination": 9,
                                "type": "secp256k1",
                                "amount": "235547368713219"
                              },
                              "utxoType": "mint",
                              "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                              "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                              "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                              "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c",
                              "consumingTxTimestamp": 1599696000,
                              "outputIndex": "38",
                              "timestamp": 1599696000,
                              "locktime": 0,
                              "threshold": 1,
                              "addresses": [
                                "avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"
                              ],
                              "credentials": [
                                {
                                  "signature": "6bhkPfl1Ulpztm1Qj8cqZwK1kLIBHCzUo79QtDswK/oFWf8ux26l5jugwf27VjUcXJA3bIzAz+bhG0IQTJkazQE",
                                  "publicKey": "AnEAbQrj6HV8Zi3Krnt1nIJui0BL5+2lXIVu+WCxD25N"
                                }
                              ]
                            }
                          ],
                          "emittedUtxos": [
                            {
                              "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC",
                              "asset": {
                                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                                "name": "Avalanche",
                                "symbol": "AVAX",
                                "denomination": 9,
                                "type": "secp256k1",
                                "amount": "235547368713219"
                              },
                              "utxoType": "mint",
                              "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                              "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                              "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                              "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c",
                              "consumingTxTimestamp": 1599696000,
                              "outputIndex": "38",
                              "timestamp": 1599696000,
                              "locktime": 0,
                              "threshold": 1,
                              "addresses": [
                                "avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"
                              ],
                              "credentials": [
                                {
                                  "signature": "6bhkPfl1Ulpztm1Qj8cqZwK1kLIBHCzUo79QtDswK/oFWf8ux26l5jugwf27VjUcXJA3bIzAz+bhG0IQTJkazQE",
                                  "publicKey": "AnEAbQrj6HV8Zi3Krnt1nIJui0BL5+2lXIVu+WCxD25N"
                                }
                              ]
                            }
                          ],
                          "amountUnlocked": [
                            {
                              "assetId": "5mRYAWkChM7Y2Tpq4cr25RAdRZwXbvoTRKazs7Z5qzA4PUPgh",
                              "name": "Letsee",
                              "symbol": "LETC",
                              "denomination": 0,
                              "type": "nft",
                              "amount": "0"
                            },
                            {
                              "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                              "name": "Avalanche",
                              "symbol": "AVAX",
                              "denomination": 9,
                              "type": "secp256k1",
                              "amount": "18650252"
                            }
                          ],
                          "amountCreated": [
                            {
                              "assetId": "5mRYAWkChM7Y2Tpq4cr25RAdRZwXbvoTRKazs7Z5qzA4PUPgh",
                              "name": "Letsee",
                              "symbol": "LETC",
                              "denomination": 0,
                              "type": "nft",
                              "amount": "0"
                            },
                            {
                              "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                              "name": "Avalanche",
                              "symbol": "AVAX",
                              "denomination": 9,
                              "type": "secp256k1",
                              "amount": "8650252"
                            }
                          ],
                          "vertices": [
                            {
                              "hash": "82qPRREHmh8Cfta4PGD6GymY9ZLyvgYugqW6hj9FykpMVRz1S",
                              "height": 1961,
                              "timestamp": 1600762738
                            }
                          ]
                        },
                        {
                          "txHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c",
                          "txType": "BaseTx",
                          "chainFormat": "linear",
                          "timestamp": 1600762738,
                          "memo": "0x546865204176616c616e6368652050726f6a656374",
                          "consumedUtxos": [
                            {
                              "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC",
                              "asset": {
                                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                                "name": "Avalanche",
                                "symbol": "AVAX",
                                "denomination": 9,
                                "type": "secp256k1",
                                "amount": "235547368713219"
                              },
                              "utxoType": "mint",
                              "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                              "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                              "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                              "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c",
                              "consumingTxTimestamp": 1599696000,
                              "outputIndex": "38",
                              "timestamp": 1599696000,
                              "locktime": 0,
                              "threshold": 1,
                              "addresses": [
                                "avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"
                              ],
                              "credentials": [
                                {
                                  "signature": "6bhkPfl1Ulpztm1Qj8cqZwK1kLIBHCzUo79QtDswK/oFWf8ux26l5jugwf27VjUcXJA3bIzAz+bhG0IQTJkazQE",
                                  "publicKey": "AnEAbQrj6HV8Zi3Krnt1nIJui0BL5+2lXIVu+WCxD25N"
                                }
                              ]
                            }
                          ],
                          "emittedUtxos": [
                            {
                              "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC",
                              "asset": {
                                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                                "name": "Avalanche",
                                "symbol": "AVAX",
                                "denomination": 9,
                                "type": "secp256k1",
                                "amount": "235547368713219"
                              },
                              "utxoType": "mint",
                              "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                              "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                              "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                              "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c",
                              "consumingTxTimestamp": 1599696000,
                              "outputIndex": "38",
                              "timestamp": 1599696000,
                              "locktime": 0,
                              "threshold": 1,
                              "addresses": [
                                "avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"
                              ],
                              "credentials": [
                                {
                                  "signature": "6bhkPfl1Ulpztm1Qj8cqZwK1kLIBHCzUo79QtDswK/oFWf8ux26l5jugwf27VjUcXJA3bIzAz+bhG0IQTJkazQE",
                                  "publicKey": "AnEAbQrj6HV8Zi3Krnt1nIJui0BL5+2lXIVu+WCxD25N"
                                }
                              ]
                            }
                          ],
                          "amountUnlocked": [
                            {
                              "assetId": "5mRYAWkChM7Y2Tpq4cr25RAdRZwXbvoTRKazs7Z5qzA4PUPgh",
                              "name": "Letsee",
                              "symbol": "LETC",
                              "denomination": 0,
                              "type": "nft",
                              "amount": "0"
                            },
                            {
                              "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                              "name": "Avalanche",
                              "symbol": "AVAX",
                              "denomination": 9,
                              "type": "secp256k1",
                              "amount": "18650252"
                            }
                          ],
                          "amountCreated": [
                            {
                              "assetId": "5mRYAWkChM7Y2Tpq4cr25RAdRZwXbvoTRKazs7Z5qzA4PUPgh",
                              "name": "Letsee",
                              "symbol": "LETC",
                              "denomination": 0,
                              "type": "nft",
                              "amount": "0"
                            },
                            {
                              "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                              "name": "Avalanche",
                              "symbol": "AVAX",
                              "denomination": 9,
                              "type": "secp256k1",
                              "amount": "8650252"
                            }
                          ],
                          "blockHash": "82qPRREHmh8Cfta4PGD6GymY9ZLyvgYugqW6hj9FykpMVRz1S",
                          "blockHeight": 1005
                        }
                      ]
                    }
                  },
                  "c-chain": {
                    "value": {
                      "nextPageToken": "MjAyMy0wMy0xNCAxNjoyNjoxOCswMHw0MDQ5NjQw",
                      "transactions": [
                        {
                          "txHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c",
                          "blockHeight": 1005,
                          "blockHash": "0x57a5cb7704561d1d59bd563b6421021b7563960c05ba3ae0e36fc36917c742ee",
                          "timestamp": 1600762738,
                          "memo": "0x546865204176616c616e6368652050726f6a656374",
                          "sourceChain": "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5",
                          "destinationChain": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                          "txType": "ExportTx",
                          "evmInputs": [
                            {
                              "fromAddress": "0xD0f2898e49d941D6d479B381d3C8F0bd8d983b4c",
                              "asset": {
                                "assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof",
                                "name": "Avalanche",
                                "symbol": "AVAX",
                                "denomination": 9,
                                "type": "secp256k1",
                                "amount": "5001000"
                              }
                            }
                          ],
                          "emittedUtxos": [
                            {
                              "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC",
                              "asset": {
                                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                                "name": "Avalanche",
                                "symbol": "AVAX",
                                "denomination": 9,
                                "type": "secp256k1",
                                "amount": "235547368713219"
                              },
                              "utxoType": "mint",
                              "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                              "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                              "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                              "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c",
                              "consumingTxTimestamp": 1599696000,
                              "outputIndex": "38",
                              "timestamp": 1599696000,
                              "locktime": 0,
                              "threshold": 1,
                              "addresses": [
                                "avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"
                              ],
                              "credentials": [
                                {
                                  "signature": "6bhkPfl1Ulpztm1Qj8cqZwK1kLIBHCzUo79QtDswK/oFWf8ux26l5jugwf27VjUcXJA3bIzAz+bhG0IQTJkazQE",
                                  "publicKey": "AnEAbQrj6HV8Zi3Krnt1nIJui0BL5+2lXIVu+WCxD25N"
                                }
                              ]
                            }
                          ],
                          "amountUnlocked": [
                            {
                              "assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof",
                              "name": "Avalanche",
                              "symbol": "AVAX",
                              "denomination": 9,
                              "type": "secp256k1",
                              "amount": "5001000"
                            }
                          ],
                          "amountCreated": [
                            {
                              "assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof",
                              "name": "Avalanche",
                              "symbol": "AVAX",
                              "denomination": 9,
                              "type": "secp256k1",
                              "amount": "5001000"
                            }
                          ]
                        },
                        {
                          "txHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c",
                          "blockHeight": 1005,
                          "blockHash": "0x57a5cb7704561d1d59bd563b6421021b7563960c05ba3ae0e36fc36917c742ee",
                          "timestamp": 1600762738,
                          "memo": "0x546865204176616c616e6368652050726f6a656374",
                          "sourceChain": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                          "destinationChain": "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5",
                          "txType": "ImportTx",
                          "evmOutputs": [
                            {
                              "toAddress": "0xD0f2898e49d941D6d479B381d3C8F0bd8d983b4c",
                              "asset": {
                                "assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof",
                                "name": "Avalanche",
                                "symbol": "AVAX",
                                "denomination": 9,
                                "type": "secp256k1",
                                "amount": "5001000"
                              }
                            }
                          ],
                          "consumedUtxos": [
                            {
                              "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC",
                              "asset": {
                                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                                "name": "Avalanche",
                                "symbol": "AVAX",
                                "denomination": 9,
                                "type": "secp256k1",
                                "amount": "235547368713219"
                              },
                              "utxoType": "mint",
                              "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                              "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                              "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                              "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c",
                              "consumingTxTimestamp": 1599696000,
                              "outputIndex": "38",
                              "timestamp": 1599696000,
                              "locktime": 0,
                              "threshold": 1,
                              "addresses": [
                                "avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"
                              ],
                              "credentials": [
                                {
                                  "signature": "6bhkPfl1Ulpztm1Qj8cqZwK1kLIBHCzUo79QtDswK/oFWf8ux26l5jugwf27VjUcXJA3bIzAz+bhG0IQTJkazQE",
                                  "publicKey": "AnEAbQrj6HV8Zi3Krnt1nIJui0BL5+2lXIVu+WCxD25N"
                                }
                              ]
                            }
                          ],
                          "amountUnlocked": [
                            {
                              "assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof",
                              "name": "Avalanche",
                              "symbol": "AVAX",
                              "denomination": 9,
                              "type": "secp256k1",
                              "amount": "5001000"
                            }
                          ],
                          "amountCreated": [
                            {
                              "assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof",
                              "name": "Avalanche",
                              "symbol": "AVAX",
                              "denomination": 9,
                              "type": "secp256k1",
                              "amount": "5001000"
                            }
                          ]
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ListPChainTransactionsResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ListXChainTransactionsResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ListCChainAtomicTransactionsResponse"
                    }
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Primary Network"
        ]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/transactions:listStaking": {
      "get": {
        "operationId": "listActivePrimaryNetworkStakingTransactions",
        "summary": "Returns active staking transactions for supplied addresses.",
        "parameters": [
          {
            "name": "addresses",
            "required": false,
            "in": "query",
            "description": "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"avax\"/\"fuji\", \"P-avax\"/\"P-fuji\" or \"X-avax\"/\"X-fuji\".",
            "example": "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size\n      is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A supported chain name for P-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain instead!",
            "example": "p-chain",
            "schema": {
              "$ref": "#/components/schemas/PChainId"
            }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": {
              "$ref": "#/components/schemas/Network"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "example": "asc",
            "description": "The order by which to sort results. Use \"asc\" for ascending\n      order, \"desc\" for descending order. Sorted by timestamp or the `sortBy`\n      query parameter, if provided.",
            "schema": {
              "$ref": "#/components/schemas/SortOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPChainTransactionsResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Primary Network"
        ]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/utxos": {
      "get": {
        "operationId": "getUtxosByAddresses",
        "summary": "Returns a list of UTXOs for the supplied addresses.",
        "parameters": [
          {
            "name": "addresses",
            "required": false,
            "in": "query",
            "description": "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"avax\"/\"fuji\", \"P-avax\"/\"P-fuji\" or \"X-avax\"/\"X-fuji\".",
            "example": "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size\n      is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead!",
            "example": "p-chain",
            "schema": {
              "$ref": "#/components/schemas/BlockchainId"
            }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": {
              "$ref": "#/components/schemas/Network"
            }
          },
          {
            "name": "assetId",
            "required": false,
            "in": "query",
            "description": "Asset ID for any asset (only applicable X-Chain)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "example": "asc",
            "description": "The order by which to sort results. Use \"asc\" for ascending\n      order, \"desc\" for descending order. Sorted by timestamp or the `sortBy`\n      query parameter, if provided.",
            "schema": {
              "$ref": "#/components/schemas/SortOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "p-chain": {
                    "$ref": "#/components/schemas/ListPChainUtxosResponse"
                  },
                  "x-chain": {
                    "value": {
                      "nextPageToken": "MjAyMy0wMy0xNCAxNjoyNjoxOCswMHw0MDQ5NjQw",
                      "utxos": [
                        {
                          "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC",
                          "asset": {
                            "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                            "name": "Avalanche",
                            "symbol": "AVAX",
                            "denomination": 9,
                            "type": "secp256k1",
                            "amount": "235547368713219"
                          },
                          "utxoType": "mint",
                          "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                          "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                          "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                          "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c",
                          "consumingTxTimestamp": 1599696000,
                          "outputIndex": "38",
                          "timestamp": 1599696000,
                          "locktime": 0,
                          "threshold": 1,
                          "addresses": [
                            "avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"
                          ],
                          "credentials": [
                            {
                              "signature": "6bhkPfl1Ulpztm1Qj8cqZwK1kLIBHCzUo79QtDswK/oFWf8ux26l5jugwf27VjUcXJA3bIzAz+bhG0IQTJkazQE",
                              "publicKey": "AnEAbQrj6HV8Zi3Krnt1nIJui0BL5+2lXIVu+WCxD25N"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "c-chain": {
                    "value": {
                      "nextPageToken": "MjAyMy0wMy0xNCAxNjoyNjoxOCswMHw0MDQ5NjQw",
                      "utxos": [
                        {
                          "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC",
                          "asset": {
                            "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                            "name": "Avalanche",
                            "symbol": "AVAX",
                            "denomination": 9,
                            "type": "secp256k1",
                            "amount": "235547368713219"
                          },
                          "utxoType": "mint",
                          "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                          "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
                          "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                          "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c",
                          "consumingTxTimestamp": 1599696000,
                          "outputIndex": "38",
                          "timestamp": 1599696000,
                          "locktime": 0,
                          "threshold": 1,
                          "addresses": [
                            "avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"
                          ],
                          "credentials": [
                            {
                              "signature": "6bhkPfl1Ulpztm1Qj8cqZwK1kLIBHCzUo79QtDswK/oFWf8ux26l5jugwf27VjUcXJA3bIzAz+bhG0IQTJkazQE",
                              "publicKey": "AnEAbQrj6HV8Zi3Krnt1nIJui0BL5+2lXIVu+WCxD25N"
                            }
                          ]
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ListPChainUtxosResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ListUtxosResponse"
                    }
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Primary Network"
        ]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/balances": {
      "get": {
        "operationId": "getBalancesByAddresses",
        "summary": "Returns balance for P-Chain, X-Chain, and C-Chain (only shared memory balance for C-Chain).",
        "parameters": [
          {
            "name": "addresses",
            "required": false,
            "in": "query",
            "description": "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"avax\"/\"fuji\", \"P-avax\"/\"P-fuji\" or \"X-avax\"/\"X-fuji\".",
            "example": "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead!",
            "example": "p-chain",
            "schema": {
              "$ref": "#/components/schemas/BlockchainId"
            }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": {
              "$ref": "#/components/schemas/Network"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "p-chain": {
                    "$ref": "#/components/schemas/ListPChainBalancesResponse"
                  },
                  "x-chain": {
                    "value": {
                      "balances": {
                        "unlocked": [
                          {
                            "assetId": "5mRYAWkChM7Y2Tpq4cr25RAdRZwXbvoTRKazs7Z5qzA4PUPgh",
                            "name": "Letsee",
                            "symbol": "LETC",
                            "denomination": 0,
                            "type": "nft",
                            "amount": "0",
                            "utxoCount": 3
                          },
                          {
                            "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                            "name": "Avalanche",
                            "symbol": "AVAX",
                            "denomination": 9,
                            "type": "secp256k1",
                            "amount": "6650252",
                            "utxoCount": 2
                          }
                        ],
                        "locked": [
                          {
                            "assetId": "5mRYAWkChM7Y2Tpq4cr25RAdRZwXbvoTRKazs7Z5qzA4PUPgh",
                            "name": "Letsee",
                            "symbol": "LETC",
                            "denomination": 0,
                            "type": "nft",
                            "amount": "0",
                            "utxoCount": 0
                          },
                          {
                            "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                            "name": "Avalanche",
                            "symbol": "AVAX",
                            "denomination": 9,
                            "type": "secp256k1",
                            "amount": "500",
                            "utxoCount": 1
                          }
                        ],
                        "atomicMemoryUnlocked": [
                          {
                            "sharedWithChainId": "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5",
                            "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                            "name": "Avalanche",
                            "symbol": "AVAX",
                            "denomination": 9,
                            "type": "secp256k1",
                            "amount": "99350998",
                            "utxoCount": 2
                          },
                          {
                            "sharedWithChainId": "11111111111111111111111111111111LpoYY",
                            "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                            "name": "Avalanche",
                            "symbol": "AVAX",
                            "denomination": 9,
                            "type": "secp256k1",
                            "amount": "800",
                            "utxoCount": 2
                          }
                        ],
                        "atomicMemoryLocked": [
                          {
                            "sharedWithChainId": "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5",
                            "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                            "name": "Avalanche",
                            "symbol": "AVAX",
                            "denomination": 9,
                            "type": "secp256k1",
                            "amount": "0",
                            "utxoCount": 0
                          },
                          {
                            "sharedWithChainId": "11111111111111111111111111111111LpoYY",
                            "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                            "name": "Avalanche",
                            "symbol": "AVAX",
                            "denomination": 9,
                            "type": "secp256k1",
                            "amount": "300",
                            "utxoCount": 1
                          }
                        ]
                      }
                    }
                  },
                  "c-chain": {
                    "value": {
                      "balances": {
                        "atomicMemoryUnlocked": [
                          {
                            "sharedWithChainId": "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5",
                            "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                            "name": "Avalanche",
                            "symbol": "AVAX",
                            "denomination": 9,
                            "type": "secp256k1",
                            "amount": "99350998",
                            "utxoCount": 2
                          },
                          {
                            "sharedWithChainId": "11111111111111111111111111111111LpoYY",
                            "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                            "name": "Avalanche",
                            "symbol": "AVAX",
                            "denomination": 9,
                            "type": "secp256k1",
                            "amount": "800",
                            "utxoCount": 2
                          }
                        ],
                        "atomicMemoryLocked": [
                          {
                            "sharedWithChainId": "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5",
                            "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                            "name": "Avalanche",
                            "symbol": "AVAX",
                            "denomination": 9,
                            "type": "secp256k1",
                            "amount": "0",
                            "utxoCount": 0
                          },
                          {
                            "sharedWithChainId": "11111111111111111111111111111111LpoYY",
                            "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                            "name": "Avalanche",
                            "symbol": "AVAX",
                            "denomination": 9,
                            "type": "secp256k1",
                            "amount": "300",
                            "utxoCount": 1
                          }
                        ]
                      }
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ListPChainBalancesResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ListXChainBalancesResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ListCChainAtomicBalancesResponse"
                    }
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Primary Network"
        ]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/blocks/{blockId}": {
      "get": {
        "operationId": "getBlockById",
        "summary": "Returns block by block_height or block_hash on P-Chain, X-Chain (Cortina), C-Chain (hexadecimal for C-Chain).",
        "parameters": [
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead!",
            "example": "p-chain",
            "schema": {
              "$ref": "#/components/schemas/BlockchainId"
            }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": {
              "$ref": "#/components/schemas/Network"
            }
          },
          {
            "name": "blockId",
            "required": true,
            "in": "path",
            "description": "A block identifier which is either a block number or the block hash.",
            "example": "5615di9ytxujackzaXNrVuWQy5y8Yrt8chPCscMr5Ku9YxJ1S",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                }
              }
            }
          }
        },
        "tags": [
          "Primary Network"
        ]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/nodes/{nodeId}/blocks": {
      "get": {
        "operationId": "listPrimaryNetworkBlocksByNodeId",
        "summary": "Returns latest blocks proposed by a given NodeID, up to user defined limit.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size\n      is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead!",
            "example": "p-chain",
            "schema": {
              "$ref": "#/components/schemas/BlockchainId"
            }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": {
              "$ref": "#/components/schemas/Network"
            }
          },
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "description": "A primary network (P or X chain) nodeId.",
            "example": "NodeID-111111111111111111116DBWJs",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListBlocksResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Primary Network"
        ]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/blocks": {
      "get": {
        "operationId": "listLatestPrimaryNetworkBlocks",
        "summary": "Returns latest blocks, up to user defined limit on P-Chain, X-Chain or C-Chain.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size\n      is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead!",
            "example": "p-chain",
            "schema": {
              "$ref": "#/components/schemas/BlockchainId"
            }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": {
              "$ref": "#/components/schemas/Network"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListBlocksResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Primary Network"
        ]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/vertices": {
      "get": {
        "operationId": "listLatestXChainVertices",
        "summary": "Returns latest vertices, up to user defined limit on X-Chain.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size\n      is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A supported chain name for X-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like x-chain instead!",
            "example": "x-chain",
            "schema": {
              "$ref": "#/components/schemas/XChainId"
            }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": {
              "$ref": "#/components/schemas/Network"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListXChainVerticesResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Primary Network"
        ]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/vertices/{vertexHash}": {
      "get": {
        "operationId": "getVertexByHash",
        "summary": "Returns one vertex with the provided vertex hash on X-Chain.",
        "parameters": [
          {
            "name": "vertexHash",
            "required": true,
            "in": "path",
            "description": "A vertex hash string.",
            "example": "haP1CW56cspZY7aEuqHNrtpvhqCaMTxQaYe6j5u2Mbn4L2Gqr",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A supported chain name for X-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like x-chain instead!",
            "example": "x-chain",
            "schema": {
              "$ref": "#/components/schemas/XChainId"
            }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": {
              "$ref": "#/components/schemas/Network"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XChainVertex"
                }
              }
            }
          }
        },
        "tags": [
          "Primary Network"
        ]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/vertices:listByHeight": {
      "get": {
        "operationId": "getVertexByHeight",
        "summary": "Returns vertices with the provided vertex height on X-Chain.",
        "parameters": [
          {
            "name": "vertexHeight",
            "required": true,
            "in": "query",
            "description": "The height of a vertex.",
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "example": 123
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size\n      is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A supported chain name for X-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like x-chain instead!",
            "example": "x-chain",
            "schema": {
              "$ref": "#/components/schemas/XChainId"
            }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": {
              "$ref": "#/components/schemas/Network"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "example": "asc",
            "description": "The order by which to sort results. Use \"asc\" for ascending\n      order, \"desc\" for descending order. Sorted by timestamp or the `sortBy`\n      query parameter, if provided.",
            "schema": {
              "$ref": "#/components/schemas/SortOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListXChainVerticesResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Primary Network"
        ]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/assets/{assetId}": {
      "get": {
        "operationId": "getAssetDetails",
        "summary": "Returns asset details corresponding to the asset id on X-Chain.",
        "parameters": [
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A supported chain name for X-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like x-chain instead!",
            "example": "x-chain",
            "schema": {
              "$ref": "#/components/schemas/XChainId"
            }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": {
              "$ref": "#/components/schemas/Network"
            }
          },
          {
            "name": "assetId",
            "required": true,
            "in": "path",
            "description": "Asset ID for any asset on X-Chain",
            "example": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XChainAssetDetails"
                }
              }
            }
          }
        },
        "tags": [
          "Primary Network"
        ]
      }
    },
    "/v1/networks/{network}/blockchains/{blockchainId}/assets/{assetId}/transactions": {
      "get": {
        "operationId": "getAssetTransactions",
        "summary": "Returns asset transactions corresponding to the asset id on X-Chain.",
        "parameters": [
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "The maximum number of items to return. The minimum page size\n      is 1. The maximum pageSize is 100.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            },
            "example": "10"
          },
          {
            "name": "pageToken",
            "required": false,
            "in": "query",
            "description": "A page token, received from a previous list call. Provide this to retrieve the subsequent page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blockchainId",
            "required": true,
            "in": "path",
            "description": "A supported chain name for X-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like x-chain instead!",
            "example": "x-chain",
            "schema": {
              "$ref": "#/components/schemas/XChainId"
            }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": {
              "$ref": "#/components/schemas/Network"
            }
          },
          {
            "name": "assetId",
            "required": true,
            "in": "path",
            "description": "Asset ID for any asset on X-Chain",
            "example": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListXChainTransactionsResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Primary Network"
        ]
      }
    },
    "/v1/networks/{network}/addresses:listChainIds": {
      "get": {
        "operationId": "getChainAddresses",
        "summary": "Return all address-mapped chain IDs that an address has been seen on chain before.",
        "parameters": [
          {
            "name": "addresses",
            "required": true,
            "in": "query",
            "description": "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"avax\"/\"fuji\", \"P-avax\"/\"P-fuji\" or \"X-avax\"/\"X-fuji\".",
            "example": "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "network",
            "required": true,
            "in": "path",
            "description": "Either mainnet or a testnet.",
            "example": "mainnet",
            "schema": {
              "$ref": "#/components/schemas/Network"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChainAddressChainIdMapListResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Primary Network"
        ]
      }
    }
  },
  "info": {
    "title": "Glacier API",
    "description": "The Glacier API provides web3 application developers with multi-chain\n       data related to Avalanche's primary network, Avalanche subnets, and\n       Ethereum. With Glacier, you can easily build products that leverage\n       real-time and historical transaction and transfer history, native and\n       token balances, and various types of token metadata. The API is in Beta\n       and may be subject to change.\n       </br></br>\n       If you have feedback or feature requests for the API, please submit them\n       <a href=\"https://portal.productboard.com/dndv9ahlkdfye4opdm8ksafi/tabs/4-glacier-api\">here</a>. Bug reports can be submitted\n       <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSeJQrcp7QoNiqozMDKrVJGX5wpU827d3cVTgF8qa7t_J1Pb-g/viewform\">here</a>, and any potential security\n       issues can be reported <a href=\"https://hackenproof.com/avalanche\">here</a>.",
    "version": "Beta",
    "contact": {}
  },
  "tags": [
    {
      "name": "EVM",
      "description": "Find information about indexed EVM-compatible chains, such as the\n       Avalanche C-Chain."
    },
    {
      "name": "Primary Network",
      "description": "Find information about Avalanche's Primary Network Chains - the P-Chain\n       and X-Chain."
    }
  ],
  "servers": [],
  "components": {
    "schemas": {
      "EvmNetworkOptions": {
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "includeChains": {
            "example": [
              "43114"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "addresses",
          "includeChains"
        ]
      },
      "CreateEvmTransactionExportRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "TRANSACTION_EXPORT_EVM"
            ]
          },
          "startDate": {
            "format": "date-time",
            "type": "string",
            "example": "2023-05-01"
          },
          "endDate": {
            "format": "date-time",
            "type": "string",
            "example": "2023-05-02"
          },
          "options": {
            "$ref": "#/components/schemas/EvmNetworkOptions"
          }
        },
        "required": [
          "type",
          "startDate",
          "endDate",
          "options"
        ]
      },
      "PrimaryNetworkOptions": {
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "includeChains": {
            "type": "array",
            "example": [
              "p-chain"
            ],
            "items": {
              "type": "string",
              "enum": [
                "p-chain",
                "x-chain",
                "c-chain",
                "11111111111111111111111111111111LpoYY",
                "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
              ]
            }
          }
        },
        "required": [
          "addresses",
          "includeChains"
        ]
      },
      "CreatePrimaryNetworkTransactionExportRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "TRANSACTION_EXPORT_PRIMARY_NETWORK"
            ]
          },
          "startDate": {
            "format": "date-time",
            "type": "string",
            "example": "2023-05-01"
          },
          "endDate": {
            "format": "date-time",
            "type": "string",
            "example": "2023-05-02"
          },
          "options": {
            "$ref": "#/components/schemas/PrimaryNetworkOptions"
          }
        },
        "required": [
          "type",
          "startDate",
          "endDate",
          "options"
        ]
      },
      "OperationStatusCode": {
        "type": "string",
        "enum": [
          "ErrInvalidRequest",
          "ErrInternal",
          "WarnTruncatedExport"
        ]
      },
      "TransactionExportMetadata": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/OperationStatusCode"
          },
          "downloadUrl": {
            "type": "string",
            "description": "File download URL. Provided only for COMPLETED and COMPLETED_WITH_WARNING operations."
          },
          "nextDate": {
            "format": "date-time",
            "type": "string",
            "description": "The next date to use as the startDate in follow up requests \n      if a request results in a transaction history exceeding the max size and \n      has been reported as COMPLETED_WITH_WARNING with the warning \n      WarnTruncatedExport."
          }
        }
      },
      "OperationType": {
        "type": "string",
        "enum": [
          "TRANSACTION_EXPORT_EVM",
          "TRANSACTION_EXPORT_PRIMARY_NETWORK"
        ]
      },
      "OperationStatus": {
        "type": "string",
        "enum": [
          "RUNNING",
          "COMPLETED",
          "COMPLETED_WITH_WARNING",
          "FAILED"
        ]
      },
      "OperationStatusResponse": {
        "type": "object",
        "properties": {
          "operationId": {
            "type": "string"
          },
          "operationType": {
            "$ref": "#/components/schemas/OperationType"
          },
          "operationStatus": {
            "$ref": "#/components/schemas/OperationStatus"
          },
          "message": {
            "type": "string"
          },
          "metadata": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransactionExportMetadata"
              }
            ]
          },
          "createdAtTimestamp": {
            "type": "number"
          },
          "updatedAtTimestamp": {
            "type": "number"
          }
        },
        "required": [
          "operationId",
          "operationType",
          "operationStatus",
          "metadata",
          "createdAtTimestamp",
          "updatedAtTimestamp"
        ]
      },
      "CurrencyCode": {
        "type": "string",
        "enum": [
          "usd",
          "eur",
          "aud",
          "cad",
          "chf",
          "clp",
          "cny",
          "czk",
          "dkk",
          "gbp",
          "hkd",
          "huf",
          "jpy",
          "nzd"
        ]
      },
      "Money": {
        "type": "object",
        "properties": {
          "currencyCode": {
            "description": "ISO 4217 currency code.",
            "example": "usd",
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "value": {
            "type": "number",
            "description": "Monetary value in base 10 decimals.",
            "example": "42.42"
          }
        },
        "required": [
          "currencyCode",
          "value"
        ]
      },
      "NativeTokenBalance": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The contract name.",
            "example": "Wrapped AVAX"
          },
          "symbol": {
            "type": "string",
            "description": "The contract symbol.",
            "example": "WAVAX"
          },
          "decimals": {
            "type": "number",
            "description": "The number of decimals the token uses. For example `6`, \n      means to divide the token amount by `1000000` to get its user \n      representation.",
            "example": 18
          },
          "logoUri": {
            "type": "string",
            "description": "The logo uri for the address.",
            "example": "https://glacier-api.avax.network/proxy/chain-assets/main/chains/43114/token-logo.png"
          },
          "chainId": {
            "type": "string",
            "description": "The evm chain id.",
            "example": "43114"
          },
          "price": {
            "description": "The token price, if available.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ]
          },
          "balance": {
            "type": "string",
            "description": "The address balance for the token, in units specified by the \n      `decimals` value for the contract.",
            "example": "2000000000000000000"
          },
          "balanceValue": {
            "description": "The monetary value of the balance, if a price is available for the token.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ]
          }
        },
        "required": [
          "name",
          "symbol",
          "decimals",
          "chainId",
          "balance"
        ]
      },
      "GetNativeBalanceResponse": {
        "type": "object",
        "properties": {
          "nativeTokenBalance": {
            "description": "The native token balance for the address.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NativeTokenBalance"
              }
            ]
          }
        },
        "required": [
          "nativeTokenBalance"
        ]
      },
      "Erc20TokenBalance": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "A wallet or contract address in mixed-case checksum encoding.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "name": {
            "type": "string",
            "description": "The contract name.",
            "example": "Wrapped AVAX"
          },
          "symbol": {
            "type": "string",
            "description": "The contract symbol.",
            "example": "WAVAX"
          },
          "decimals": {
            "type": "number",
            "description": "The number of decimals the token uses. For example `6`, \n      means to divide the token amount by `1000000` to get its user \n      representation.",
            "example": 18
          },
          "logoUri": {
            "type": "string",
            "description": "The logo uri for the address.",
            "example": "https://glacier-api.avax.network/proxy/chain-assets/main/chains/43114/token-logo.png"
          },
          "ercType": {
            "type": "string",
            "enum": [
              "ERC-20"
            ]
          },
          "price": {
            "description": "The token price, if available.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ]
          },
          "chainId": {
            "type": "string",
            "description": "The evm chain id.",
            "example": "43114"
          },
          "balance": {
            "type": "string",
            "description": "The address balance for the token, in units specified by the \n      `decimals` value for the contract.",
            "example": "2000000000000000000"
          },
          "balanceValue": {
            "description": "The monetary value of the balance, if a price is available for the token.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ]
          }
        },
        "required": [
          "address",
          "name",
          "symbol",
          "decimals",
          "ercType",
          "chainId",
          "balance"
        ]
      },
      "ListErc20BalancesResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "erc20TokenBalances": {
            "description": "The list of ERC-20 token balances for the address.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Erc20TokenBalance"
            }
          }
        },
        "required": [
          "erc20TokenBalances"
        ]
      },
      "NftTokenMetadataStatus": {
        "type": "string",
        "enum": [
          "UNKNOWN",
          "MISSING_TOKEN",
          "INVALID_TOKEN_URI",
          "INVALID_TOKEN_URI_SCHEME",
          "UNREACHABLE_TOKEN_URI",
          "THROTTLED_TOKEN_URI",
          "METADATA_CONTENT_TOO_LARGE",
          "INVALID_METADATA",
          "INVALID_METADATA_JSON",
          "INDEXED",
          "UNINDEXED"
        ]
      },
      "Erc721TokenMetadata": {
        "type": "object",
        "properties": {
          "indexStatus": {
            "description": "The metadata indexing status of the nft.",
            "example": "indexed",
            "$ref": "#/components/schemas/NftTokenMetadataStatus"
          },
          "metadataLastUpdatedTimestamp": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "imageUri": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "animationUri": {
            "type": "string"
          },
          "externalUrl": {
            "type": "string"
          },
          "background": {
            "type": "string"
          },
          "attributes": {
            "type": "string"
          }
        },
        "required": [
          "indexStatus"
        ]
      },
      "Erc721TokenBalance": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "A wallet or contract address in mixed-case checksum encoding.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "name": {
            "type": "string",
            "description": "The contract name.",
            "example": "Wrapped AVAX"
          },
          "symbol": {
            "type": "string",
            "description": "The contract symbol.",
            "example": "WAVAX"
          },
          "ercType": {
            "type": "string",
            "enum": [
              "ERC-721"
            ]
          },
          "tokenId": {
            "type": "string"
          },
          "tokenUri": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Erc721TokenMetadata"
          },
          "ownerAddress": {
            "type": "string",
            "description": "A wallet or contract address in mixed-case checksum encoding.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "chainId": {
            "type": "string",
            "description": "The evm chain id.",
            "example": "43114"
          }
        },
        "required": [
          "address",
          "name",
          "symbol",
          "ercType",
          "tokenId",
          "tokenUri",
          "metadata",
          "chainId"
        ]
      },
      "ListErc721BalancesResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "erc721TokenBalances": {
            "description": "The list of ERC-721 token balances for the address.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Erc721TokenBalance"
            }
          }
        },
        "required": [
          "erc721TokenBalances"
        ]
      },
      "Erc1155TokenMetadata": {
        "type": "object",
        "properties": {
          "indexStatus": {
            "description": "The metadata indexing status of the nft.",
            "example": "indexed",
            "$ref": "#/components/schemas/NftTokenMetadataStatus"
          },
          "metadataLastUpdatedTimestamp": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "imageUri": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "animationUri": {
            "type": "string"
          },
          "externalUrl": {
            "type": "string"
          },
          "background": {
            "type": "string"
          },
          "decimals": {
            "type": "number"
          },
          "properties": {
            "type": "string"
          }
        },
        "required": [
          "indexStatus"
        ]
      },
      "Erc1155TokenBalance": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "A wallet or contract address in mixed-case checksum encoding.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "ercType": {
            "type": "string",
            "enum": [
              "ERC-1155"
            ]
          },
          "tokenId": {
            "type": "string"
          },
          "tokenUri": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Erc1155TokenMetadata"
          },
          "chainId": {
            "type": "string",
            "description": "The evm chain id.",
            "example": "43114"
          },
          "balance": {
            "type": "string",
            "description": "The address balance for the token, in units specified by the \n      `decimals` value for the contract.",
            "example": "2000000000000000000"
          }
        },
        "required": [
          "address",
          "ercType",
          "tokenId",
          "tokenUri",
          "metadata",
          "chainId",
          "balance"
        ]
      },
      "ListErc1155BalancesResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "erc1155TokenBalances": {
            "description": "The list of ERC-1155 token balances for the address.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Erc1155TokenBalance"
            }
          }
        },
        "required": [
          "erc1155TokenBalances"
        ]
      },
      "ListCollectibleBalancesResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "collectibleBalances": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Erc721TokenBalance"
                },
                {
                  "$ref": "#/components/schemas/Erc1155TokenBalance"
                }
              ]
            },
            "description": "The list of ERC-721 and ERC-1155 token balances for the\n      address."
          }
        },
        "required": [
          "collectibleBalances"
        ]
      },
      "GetBlockResponse": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "type": "string",
            "description": "The block number on the chain.",
            "example": "339"
          },
          "blockTimestamp": {
            "type": "number",
            "description": "The block finality timestamp.",
            "example": 1648672486
          },
          "blockHash": {
            "type": "string",
            "description": "The block hash identifier.",
            "example": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
          },
          "txCount": {
            "type": "number",
            "description": "The number of evm transactions in the block."
          },
          "atomicTxCount": {
            "type": "number",
            "description": "The number of atomic transactions in the block."
          },
          "baseFee": {
            "type": "string",
            "description": "The base gas fee for a transaction to be included in the block."
          },
          "gasUsed": {
            "type": "string",
            "description": "The gas used for transactions in the block."
          },
          "gasLimit": {
            "type": "string",
            "description": "The total gas limit set for transactions in the block."
          },
          "gasCost": {
            "type": "string"
          },
          "parentHash": {
            "type": "string",
            "description": "The hash of the parent block."
          },
          "feesSpent": {
            "type": "string",
            "description": "The amount of fees spent/burned for transactions in the block."
          },
          "cumulativeTransactions": {
            "type": "string",
            "description": "The cumulative number of transactions for the chain including this block."
          }
        },
        "required": [
          "blockNumber",
          "blockTimestamp",
          "blockHash",
          "txCount",
          "atomicTxCount",
          "baseFee",
          "gasUsed",
          "gasLimit",
          "gasCost",
          "parentHash",
          "feesSpent",
          "cumulativeTransactions"
        ]
      },
      "ListBlocksResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "blocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Block"
            }
          }
        },
        "required": [
          "blocks"
        ]
      },
      "RichAddress": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The contract name.",
            "example": "Wrapped AVAX"
          },
          "symbol": {
            "type": "string",
            "description": "The contract symbol.",
            "example": "WAVAX"
          },
          "decimals": {
            "type": "number",
            "description": "The number of decimals the token uses. For example `6`, \n      means to divide the token amount by `1000000` to get its user \n      representation.",
            "example": 18
          },
          "logoUri": {
            "type": "string",
            "description": "The logo uri for the address.",
            "example": "https://glacier-api.avax.network/proxy/chain-assets/main/chains/43114/token-logo.png"
          },
          "address": {
            "type": "string",
            "description": "A wallet or contract address in mixed-case checksum encoding.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          }
        },
        "required": [
          "address"
        ]
      },
      "Erc20Token": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "A wallet or contract address in mixed-case checksum encoding.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "name": {
            "type": "string",
            "description": "The contract name.",
            "example": "Wrapped AVAX"
          },
          "symbol": {
            "type": "string",
            "description": "The contract symbol.",
            "example": "WAVAX"
          },
          "decimals": {
            "type": "number",
            "description": "The number of decimals the token uses. For example `6`, \n      means to divide the token amount by `1000000` to get its user \n      representation.",
            "example": 18
          },
          "logoUri": {
            "type": "string",
            "description": "The logo uri for the address.",
            "example": "https://glacier-api.avax.network/proxy/chain-assets/main/chains/43114/token-logo.png"
          },
          "ercType": {
            "type": "string",
            "enum": [
              "ERC-20"
            ]
          },
          "price": {
            "description": "The token price, if available.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ]
          }
        },
        "required": [
          "address",
          "name",
          "symbol",
          "decimals",
          "ercType"
        ]
      },
      "Erc20TransferDetails": {
        "type": "object",
        "properties": {
          "from": {
            "$ref": "#/components/schemas/RichAddress"
          },
          "to": {
            "$ref": "#/components/schemas/RichAddress"
          },
          "value": {
            "type": "string",
            "example": "10000000000000000000"
          },
          "erc20Token": {
            "$ref": "#/components/schemas/Erc20Token"
          }
        },
        "required": [
          "from",
          "to",
          "value",
          "erc20Token"
        ]
      },
      "Erc721Token": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "A wallet or contract address in mixed-case checksum encoding.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "name": {
            "type": "string",
            "description": "The contract name.",
            "example": "Wrapped AVAX"
          },
          "symbol": {
            "type": "string",
            "description": "The contract symbol.",
            "example": "WAVAX"
          },
          "ercType": {
            "type": "string",
            "enum": [
              "ERC-721"
            ]
          },
          "tokenId": {
            "type": "string"
          },
          "tokenUri": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Erc721TokenMetadata"
          },
          "ownerAddress": {
            "type": "string",
            "description": "A wallet or contract address in mixed-case checksum encoding.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          }
        },
        "required": [
          "address",
          "name",
          "symbol",
          "ercType",
          "tokenId",
          "tokenUri",
          "metadata"
        ]
      },
      "Erc721TransferDetails": {
        "type": "object",
        "properties": {
          "from": {
            "$ref": "#/components/schemas/RichAddress"
          },
          "to": {
            "$ref": "#/components/schemas/RichAddress"
          },
          "erc721Token": {
            "$ref": "#/components/schemas/Erc721Token"
          }
        },
        "required": [
          "from",
          "to",
          "erc721Token"
        ]
      },
      "Erc1155Token": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "A wallet or contract address in mixed-case checksum encoding.",
            "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
          },
          "ercType": {
            "type": "string",
            "enum": [
              "ERC-1155"
            ]
          },
          "tokenId": {
            "type": "string"
          },
          "tokenUri": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Erc1155TokenMetadata"
          }
        },
        "required": [
          "address",
          "ercType",
          "tokenId",
          "tokenUri",
          "metadata"
        ]
      },
      "Erc1155TransferDetails": {
        "type": "object",
        "properties": {
          "from": {
            "$ref": "#/components/schemas/RichAddress"
          },
          "to": {
            "$ref": "#/components/schemas/RichAddress"
          },
          "value": {
            "type": "string",
            "example": "10000000000000000000"
          },
          "erc1155Token": {
            "$ref": "#/components/schemas/Erc1155Token"
          }
        },
        "required": [
          "from",
          "to",
          "value",
          "erc1155Token"
        ]
      },
      "InternalTransactionOpCall": {
        "type": "string",
        "enum": [
          "UNKNOWN",
          "CALL",
          "CREATE",
          "CREATE2",
          "CALLCODE",
          "DELEGATECALL",
          "STATICCALL"
        ]
      },
      "InternalTransactionDetails": {
        "type": "object",
        "properties": {
          "from": {
            "$ref": "#/components/schemas/RichAddress"
          },
          "to": {
            "$ref": "#/components/schemas/RichAddress"
          },
          "internalTxType": {
            "$ref": "#/components/schemas/InternalTransactionOpCall"
          },
          "value": {
            "type": "string",
            "example": "10000000000000000000"
          },
          "isReverted": {
            "type": "boolean",
            "description": "True if the internal transaction was reverted."
          },
          "gasUsed": {
            "type": "string"
          },
          "gasLimit": {
            "type": "string"
          }
        },
        "required": [
          "from",
          "to",
          "internalTxType",
          "value",
          "isReverted",
          "gasUsed",
          "gasLimit"
        ]
      },
      "NetworkToken": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The contract name.",
            "example": "Wrapped AVAX"
          },
          "symbol": {
            "type": "string",
            "description": "The contract symbol.",
            "example": "WAVAX"
          },
          "decimals": {
            "type": "number",
            "description": "The number of decimals the token uses. For example `6`, \n      means to divide the token amount by `1000000` to get its user \n      representation.",
            "example": 18
          },
          "logoUri": {
            "type": "string",
            "description": "The logo uri for the address.",
            "example": "https://glacier-api.avax.network/proxy/chain-assets/main/chains/43114/token-logo.png"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "symbol",
          "decimals"
        ]
      },
      "NetworkTokenDetails": {
        "type": "object",
        "properties": {
          "networkToken": {
            "$ref": "#/components/schemas/NetworkToken"
          },
          "currentPrice": {
            "description": "The current token price, if available.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ]
          },
          "historicalPrice": {
            "description": "The historical token price at the time the transaction\n      occured, if available. Note, this is only provided if the transaction\n      occured more than 24 hours ago.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ]
          }
        },
        "required": [
          "networkToken"
        ]
      },
      "TransactionMethodType": {
        "type": "string",
        "enum": [
          "NATIVE_TRANSFER",
          "CONTRACT_CALL",
          "CONTRACT_CREATION"
        ]
      },
      "Method": {
        "type": "object",
        "properties": {
          "callType": {
            "description": "The contract call type. \n      NATIVE_TRANSFER indicates a transfer of the \n      native token without any smart-contract interaction. \n      CONTRACT_CALL indicates a smart-contract\n      interaction.\n      CONTRACT_CREATION indicates a smart-contract\n      creation.",
            "example": "CONTRACT_CALL",
            "$ref": "#/components/schemas/TransactionMethodType"
          },
          "methodHash": {
            "type": "string",
            "description": "The contract method hash identifier. The method hash is only set if the `callType` is `CONTRACT_CALL`.",
            "example": "0xa9059cbb"
          },
          "methodName": {
            "type": "string",
            "description": "The contract method name including parameter types. If the `callType` is `NATIVE_TRANSFER` this is set to 'Native Transfer'. If the `callType` is `CONTRACT_CREATION` this is set to 'Contract Created'.",
            "example": "transfer(address,uint256)"
          }
        },
        "required": [
          "callType",
          "methodHash"
        ]
      },
      "FullNativeTransactionDetails": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "type": "string",
            "description": "The block number on the chain.",
            "example": "339"
          },
          "blockTimestamp": {
            "type": "number",
            "description": "The block finality timestamp.",
            "example": 1648672486
          },
          "blockHash": {
            "type": "string",
            "description": "The block hash identifier.",
            "example": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
          },
          "blockIndex": {
            "type": "number",
            "description": "The index at which the transaction occured in the block (0-indexed).",
            "example": 0
          },
          "txHash": {
            "type": "string",
            "description": "The transaction hash identifier.",
            "example": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
          },
          "txStatus": {
            "type": "string",
            "description": "The transaction status, which is either 0 (failed) or 1 (successful).",
            "example": "1"
          },
          "txType": {
            "type": "number",
            "description": "The transaction type.",
            "example": 1
          },
          "gasLimit": {
            "type": "string",
            "description": "The gas limit set for the transaction.",
            "example": "51373"
          },
          "gasUsed": {
            "type": "string",
            "description": "The amount of gas used.",
            "example": "51373"
          },
          "gasPrice": {
            "type": "string",
            "description": "The gas price denominated by the number of decimals of the native token.",
            "example": "470000000000"
          },
          "nonce": {
            "type": "string",
            "description": "The nonce used by the sender of the transaction.",
            "example": "1"
          },
          "from": {
            "$ref": "#/components/schemas/RichAddress"
          },
          "to": {
            "$ref": "#/components/schemas/RichAddress"
          },
          "method": {
            "$ref": "#/components/schemas/Method"
          },
          "value": {
            "type": "string",
            "example": "10000000000000000000"
          },
          "input": {
            "type": "string",
            "description": "The data sent for the transaction."
          },
          "baseFeePerGas": {
            "type": "string"
          },
          "maxFeePerGas": {
            "type": "string"
          },
          "maxPriorityFeePerGas": {
            "type": "string"
          }
        },
        "required": [
          "blockNumber",
          "blockTimestamp",
          "blockHash",
          "blockIndex",
          "txHash",
          "txStatus",
          "txType",
          "gasLimit",
          "gasUsed",
          "gasPrice",
          "nonce",
          "from",
          "to",
          "value",
          "input",
          "baseFeePerGas"
        ]
      },
      "GetTransactionResponse": {
        "type": "object",
        "properties": {
          "erc20Transfers": {
            "description": "The list of ERC-20 transfers.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Erc20TransferDetails"
            }
          },
          "erc721Transfers": {
            "description": "The list of ERC-721 transfers.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Erc721TransferDetails"
            }
          },
          "erc1155Transfers": {
            "description": "The list of ERC-1155 transfers.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Erc1155TransferDetails"
            }
          },
          "internalTransactions": {
            "description": "The list of internal transactions. Note that this list only \n      includes CALL and \n      CALLCODE internal transactions that had a \n      non-zero value and \n      CREATE/CREATE2 \n      calls. Use a client provider to recieve a full debug trace of the\n      transaction.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InternalTransactionDetails"
            }
          },
          "networkTokenDetails": {
            "$ref": "#/components/schemas/NetworkTokenDetails"
          },
          "nativeTransaction": {
            "$ref": "#/components/schemas/FullNativeTransactionDetails"
          }
        },
        "required": [
          "networkTokenDetails",
          "nativeTransaction"
        ]
      },
      "Erc20Transfer": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "type": "string",
            "description": "The block number on the chain.",
            "example": "339"
          },
          "blockTimestamp": {
            "type": "number",
            "description": "The block finality timestamp.",
            "example": 1648672486
          },
          "blockHash": {
            "type": "string",
            "description": "The block hash identifier.",
            "example": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
          },
          "txHash": {
            "type": "string",
            "description": "The transaction hash identifier.",
            "example": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
          },
          "from": {
            "$ref": "#/components/schemas/RichAddress"
          },
          "to": {
            "$ref": "#/components/schemas/RichAddress"
          },
          "value": {
            "type": "string",
            "example": "10000000000000000000"
          },
          "erc20Token": {
            "$ref": "#/components/schemas/Erc20Token"
          }
        },
        "required": [
          "blockNumber",
          "blockTimestamp",
          "blockHash",
          "txHash",
          "from",
          "to",
          "value",
          "erc20Token"
        ]
      },
      "Erc721Transfer": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "type": "string",
            "description": "The block number on the chain.",
            "example": "339"
          },
          "blockTimestamp": {
            "type": "number",
            "description": "The block finality timestamp.",
            "example": 1648672486
          },
          "blockHash": {
            "type": "string",
            "description": "The block hash identifier.",
            "example": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
          },
          "txHash": {
            "type": "string",
            "description": "The transaction hash identifier.",
            "example": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
          },
          "from": {
            "$ref": "#/components/schemas/RichAddress"
          },
          "to": {
            "$ref": "#/components/schemas/RichAddress"
          },
          "erc721Token": {
            "$ref": "#/components/schemas/Erc721Token"
          }
        },
        "required": [
          "blockNumber",
          "blockTimestamp",
          "blockHash",
          "txHash",
          "from",
          "to",
          "erc721Token"
        ]
      },
      "Erc1155Transfer": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "type": "string",
            "description": "The block number on the chain.",
            "example": "339"
          },
          "blockTimestamp": {
            "type": "number",
            "description": "The block finality timestamp.",
            "example": 1648672486
          },
          "blockHash": {
            "type": "string",
            "description": "The block hash identifier.",
            "example": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
          },
          "txHash": {
            "type": "string",
            "description": "The transaction hash identifier.",
            "example": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
          },
          "from": {
            "$ref": "#/components/schemas/RichAddress"
          },
          "to": {
            "$ref": "#/components/schemas/RichAddress"
          },
          "value": {
            "type": "string",
            "example": "10000000000000000000"
          },
          "erc1155Token": {
            "$ref": "#/components/schemas/Erc1155Token"
          }
        },
        "required": [
          "blockNumber",
          "blockTimestamp",
          "blockHash",
          "txHash",
          "from",
          "to",
          "value",
          "erc1155Token"
        ]
      },
      "ListTransfersResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "transfers": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Erc20Transfer"
                }
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Erc721Transfer"
                }
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Erc1155Transfer"
                }
              }
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "transfers"
        ]
      },
      "SortOrder": {
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ]
      },
      "NativeTransaction": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "type": "string",
            "description": "The block number on the chain.",
            "example": "339"
          },
          "blockTimestamp": {
            "type": "number",
            "description": "The block finality timestamp.",
            "example": 1648672486
          },
          "blockHash": {
            "type": "string",
            "description": "The block hash identifier.",
            "example": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
          },
          "blockIndex": {
            "type": "number",
            "description": "The index at which the transaction occured in the block (0-indexed).",
            "example": 0
          },
          "txHash": {
            "type": "string",
            "description": "The transaction hash identifier.",
            "example": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
          },
          "txStatus": {
            "type": "string",
            "description": "The transaction status, which is either 0 (failed) or 1 (successful).",
            "example": "1"
          },
          "txType": {
            "type": "number",
            "description": "The transaction type.",
            "example": 1
          },
          "gasLimit": {
            "type": "string",
            "description": "The gas limit set for the transaction.",
            "example": "51373"
          },
          "gasUsed": {
            "type": "string",
            "description": "The amount of gas used.",
            "example": "51373"
          },
          "gasPrice": {
            "type": "string",
            "description": "The gas price denominated by the number of decimals of the native token.",
            "example": "470000000000"
          },
          "nonce": {
            "type": "string",
            "description": "The nonce used by the sender of the transaction.",
            "example": "1"
          },
          "from": {
            "$ref": "#/components/schemas/RichAddress"
          },
          "to": {
            "$ref": "#/components/schemas/RichAddress"
          },
          "method": {
            "$ref": "#/components/schemas/Method"
          },
          "value": {
            "type": "string",
            "example": "10000000000000000000"
          }
        },
        "required": [
          "blockNumber",
          "blockTimestamp",
          "blockHash",
          "blockIndex",
          "txHash",
          "txStatus",
          "txType",
          "gasLimit",
          "gasUsed",
          "gasPrice",
          "nonce",
          "from",
          "to",
          "value"
        ]
      },
      "TransactionDetails": {
        "type": "object",
        "properties": {
          "nativeTransaction": {
            "description": "The native (top-level) transaction details.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NativeTransaction"
              }
            ]
          },
          "erc20Transfers": {
            "description": "The list of ERC-20 transfers.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Erc20TransferDetails"
            }
          },
          "erc721Transfers": {
            "description": "The list of ERC-721 transfers.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Erc721TransferDetails"
            }
          },
          "erc1155Transfers": {
            "description": "The list of ERC-1155 transfers.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Erc1155TransferDetails"
            }
          },
          "internalTransactions": {
            "description": "The list of internal transactions. Note that this list only \n      includes CALL and \n      CALLCODE internal transactions that had a \n      non-zero value and \n      CREATE/CREATE2 \n      calls. Use a client provider to recieve a full debug trace of the\n      transaction.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InternalTransactionDetails"
            }
          }
        },
        "required": [
          "nativeTransaction"
        ]
      },
      "ListTransactionDetailsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionDetails"
            }
          }
        },
        "required": [
          "transactions"
        ]
      },
      "ListNativeTransactionsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NativeTransaction"
            }
          }
        },
        "required": [
          "transactions"
        ]
      },
      "ListErc20TransactionsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Erc20Transfer"
            }
          }
        },
        "required": [
          "transactions"
        ]
      },
      "ListErc721TransactionsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Erc721Transfer"
            }
          }
        },
        "required": [
          "transactions"
        ]
      },
      "ListErc1155TransactionsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Erc1155Transfer"
            }
          }
        },
        "required": [
          "transactions"
        ]
      },
      "InternalTransaction": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "type": "string",
            "description": "The block number on the chain.",
            "example": "339"
          },
          "blockTimestamp": {
            "type": "number",
            "description": "The block finality timestamp.",
            "example": 1648672486
          },
          "blockHash": {
            "type": "string",
            "description": "The block hash identifier.",
            "example": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
          },
          "txHash": {
            "type": "string",
            "description": "The transaction hash identifier.",
            "example": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
          },
          "from": {
            "$ref": "#/components/schemas/RichAddress"
          },
          "to": {
            "$ref": "#/components/schemas/RichAddress"
          },
          "internalTxType": {
            "$ref": "#/components/schemas/InternalTransactionOpCall"
          },
          "value": {
            "type": "string",
            "example": "10000000000000000000"
          },
          "isReverted": {
            "type": "boolean",
            "description": "True if the internal transaction was reverted."
          },
          "gasUsed": {
            "type": "string"
          },
          "gasLimit": {
            "type": "string"
          }
        },
        "required": [
          "blockNumber",
          "blockTimestamp",
          "blockHash",
          "txHash",
          "from",
          "to",
          "internalTxType",
          "value",
          "isReverted",
          "gasUsed",
          "gasLimit"
        ]
      },
      "ListInternalTransactionsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InternalTransaction"
            }
          }
        },
        "required": [
          "transactions"
        ]
      },
      "TransactionStatus": {
        "type": "string",
        "enum": [
          "failed",
          "success"
        ]
      },
      "ChainStatus": {
        "type": "string",
        "enum": [
          "OK",
          "UNAVAILABLE"
        ]
      },
      "VmName": {
        "type": "string",
        "enum": [
          "EVM",
          "BITCOIN",
          "ETHEREUM"
        ]
      },
      "UtilityAddresses": {
        "type": "object",
        "properties": {
          "multicall": {
            "type": "string"
          }
        }
      },
      "ChainInfo": {
        "type": "object",
        "properties": {
          "chainId": {
            "type": "string"
          },
          "status": {
            "description": "Status of chain nodes. Chain nodes can become temporarily\n       `UNAVAILABLE` for several reasons, such as validator stake falling\n       below threshold. If chain nodes are `UNAVAILABLE`, requests that rely\n       on data from the chain nodes may return 503 errors.",
            "$ref": "#/components/schemas/ChainStatus"
          },
          "chainName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "platformChainId": {
            "type": "string"
          },
          "subnetId": {
            "type": "string"
          },
          "vmId": {
            "type": "string"
          },
          "vmName": {
            "$ref": "#/components/schemas/VmName"
          },
          "explorerUrl": {
            "type": "string"
          },
          "rpcUrl": {
            "type": "string"
          },
          "wsUrl": {
            "type": "string"
          },
          "isTestnet": {
            "type": "boolean"
          },
          "utilityAddresses": {
            "$ref": "#/components/schemas/UtilityAddresses"
          },
          "networkToken": {
            "$ref": "#/components/schemas/NetworkToken"
          },
          "chainLogoUri": {
            "type": "string"
          }
        },
        "required": [
          "chainId",
          "status",
          "chainName",
          "description",
          "vmName",
          "rpcUrl",
          "isTestnet",
          "networkToken"
        ]
      },
      "ListChainsResponse": {
        "type": "object",
        "properties": {
          "chains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChainInfo"
            }
          }
        },
        "required": [
          "chains"
        ]
      },
      "GetChainResponse": {
        "type": "object",
        "properties": {
          "chainId": {
            "type": "string"
          },
          "status": {
            "description": "Status of chain nodes. Chain nodes can become temporarily\n       `UNAVAILABLE` for several reasons, such as validator stake falling\n       below threshold. If chain nodes are `UNAVAILABLE`, requests that rely\n       on data from the chain nodes may return 503 errors.",
            "$ref": "#/components/schemas/ChainStatus"
          },
          "chainName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "platformChainId": {
            "type": "string"
          },
          "subnetId": {
            "type": "string"
          },
          "vmId": {
            "type": "string"
          },
          "vmName": {
            "$ref": "#/components/schemas/VmName"
          },
          "explorerUrl": {
            "type": "string"
          },
          "rpcUrl": {
            "type": "string"
          },
          "wsUrl": {
            "type": "string"
          },
          "isTestnet": {
            "type": "boolean"
          },
          "utilityAddresses": {
            "$ref": "#/components/schemas/UtilityAddresses"
          },
          "networkToken": {
            "$ref": "#/components/schemas/NetworkToken"
          },
          "chainLogoUri": {
            "type": "string"
          }
        },
        "required": [
          "chainId",
          "status",
          "chainName",
          "description",
          "vmName",
          "rpcUrl",
          "isTestnet",
          "networkToken"
        ]
      },
      "PChainTransactionType": {
        "type": "string",
        "enum": [
          "AddValidatorTx",
          "AddDelegatorTx",
          "AddPermissionlessValidatorTx",
          "AddSubnetValidatorTx",
          "RemoveSubnetValidatorTx",
          "RewardValidatorTx",
          "CreateChainTx",
          "CreateSubnetTx",
          "ImportTx",
          "ExportTx",
          "AdvanceTimeTx",
          "UNKNOWN"
        ]
      },
      "UtxoType": {
        "type": "string",
        "enum": [
          "STAKE",
          "TRANSFER"
        ]
      },
      "RewardType": {
        "type": "string",
        "enum": [
          "VALIDATOR",
          "DELEGATOR"
        ]
      },
      "PChainUtxo": {
        "type": "object",
        "properties": {
          "addresses": {
            "description": "An array of P-Chain wallet addresses.",
            "example": [
              "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "utxoId": {
            "type": "string"
          },
          "txHash": {
            "type": "string"
          },
          "outputIndex": {
            "type": "number"
          },
          "blockTimestamp": {
            "type": "number"
          },
          "consumingTxHash": {
            "type": "string"
          },
          "consumingBlockTimestamp": {
            "type": "number"
          },
          "assetId": {
            "type": "string"
          },
          "utxoType": {
            "$ref": "#/components/schemas/UtxoType"
          },
          "amount": {
            "type": "string"
          },
          "stakeableLocktime": {
            "type": "number"
          },
          "platformLocktime": {
            "type": "number"
          },
          "threshold": {
            "type": "number"
          },
          "createdOnChainId": {
            "type": "string"
          },
          "consumedOnChainId": {
            "type": "string"
          },
          "staked": {
            "type": "boolean"
          },
          "rewardType": {
            "$ref": "#/components/schemas/RewardType"
          },
          "fromTx": {
            "type": "string",
            "description": "To be deprecated",
            "deprecated": true
          },
          "toTx": {
            "type": "string",
            "description": "To be deprecated",
            "deprecated": true
          }
        },
        "required": [
          "addresses",
          "utxoId",
          "txHash",
          "outputIndex",
          "blockTimestamp",
          "assetId",
          "utxoType",
          "amount",
          "createdOnChainId",
          "consumedOnChainId"
        ]
      },
      "PChainAsset": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        },
        "required": [
          "assetId",
          "amount"
        ]
      },
      "PChainTransaction": {
        "type": "object",
        "properties": {
          "txHash": {
            "type": "string",
            "description": "A P-Chain transaction hash.",
            "example": "3P91K6nuDFvDodcRuJTsgdf9SvYe5pMiKk38HppsoeAiEztCP"
          },
          "txType": {
            "example": "AddDelegatorTx",
            "$ref": "#/components/schemas/PChainTransactionType"
          },
          "blockTimestamp": {
            "type": "number",
            "description": "The block finality timestamp.",
            "example": 1648672486
          },
          "blockNumber": {
            "type": "string"
          },
          "blockHash": {
            "type": "string"
          },
          "consumedUtxos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PChainUtxo"
            }
          },
          "emittedUtxos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PChainUtxo"
            }
          },
          "sourceChain": {
            "type": "string",
            "description": "Source chain for an atomic transaction.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "destinationChain": {
            "type": "string",
            "description": "Destination chain for an atomic transaction.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "value": {
            "description": "A list of objects containing P-chain Asset ID and the amount of that Asset ID.",
            "example": [
              {
                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                "amount": "100000000"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PChainAsset"
            }
          },
          "amountBurned": {
            "description": "A list of objects containing P-chain Asset ID and the amount of that Asset ID.",
            "example": [
              {
                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                "amount": "100000000"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PChainAsset"
            }
          },
          "amountStaked": {
            "description": "A list of objects containing P-chain Asset ID and the amount of that Asset ID. Present for AddValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx",
            "example": [
              {
                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                "amount": "100000000"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PChainAsset"
            }
          },
          "startTimestamp": {
            "type": "number",
            "description": "Present for AddValidatorTx, AddSubnetValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx"
          },
          "endTimestamp": {
            "type": "number",
            "description": "Present for AddValidatorTx, AddSubnetValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx"
          },
          "delegationFeePercent": {
            "type": "string",
            "description": "Present for AddValidatorTx, AddPermissionlessValidatorTx"
          },
          "nodeId": {
            "type": "string",
            "description": "Present for AddValidatorTx, AddSubnetValidatorTx, RemoveSubnetValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx"
          },
          "subnetId": {
            "type": "string",
            "description": "Present for AddValidatorTx, AddSubnetValidatorTx, RemoveSubnetValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx, CreateChainTx, CreateSubnetTx"
          },
          "estimatedReward": {
            "type": "string",
            "description": "Present for AddValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx"
          },
          "rewardTxHash": {
            "type": "string"
          },
          "rewardTx": {
            "type": "string",
            "description": "To be deprecated",
            "deprecated": true
          },
          "memo": {
            "type": "string"
          },
          "stakingTxHash": {
            "type": "string",
            "description": "Present for RewardValidatorTx"
          }
        },
        "required": [
          "txHash",
          "txType",
          "blockTimestamp",
          "blockNumber",
          "blockHash",
          "consumedUtxos",
          "emittedUtxos"
        ]
      },
      "Asset": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "Unique ID for an asset.",
            "example": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
          },
          "name": {
            "type": "string",
            "description": "Name of this asset.",
            "example": "Avalanche"
          },
          "symbol": {
            "type": "string",
            "description": "Symbol for this asset (max 4 characters).",
            "example": "AVAX"
          },
          "denomination": {
            "type": "number",
            "description": "Denomination of this asset to represent fungibility.",
            "example": 9
          },
          "type": {
            "type": "string",
            "description": "Type of asset like SECP256K1 or NFT.",
            "example": "secp256k1"
          },
          "amount": {
            "type": "string",
            "description": "Amount of the asset.",
            "example": "5001000"
          }
        },
        "required": [
          "assetId",
          "name",
          "symbol",
          "denomination",
          "type",
          "amount"
        ]
      },
      "UtxoCredential": {
        "type": "object",
        "properties": {
          "signature": {
            "type": "string",
            "description": "Signature provided to consume the output",
            "example": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA"
          },
          "publicKey": {
            "type": "string",
            "description": "Public key associated with the signature",
            "example": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"
          }
        }
      },
      "Utxo": {
        "type": "object",
        "properties": {
          "utxoId": {
            "type": "string",
            "description": "UTXO ID for this output.",
            "example": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC"
          },
          "asset": {
            "$ref": "#/components/schemas/Asset"
          },
          "utxoType": {
            "type": "string",
            "description": "Type of output.",
            "example": "mint"
          },
          "createdOnChainId": {
            "type": "string",
            "description": "Blockchain ID on which this output is created on.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "consumedOnChainId": {
            "type": "string",
            "description": "Blockchain ID on which this output is consumed on.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "creationTxHash": {
            "type": "string",
            "description": "Transaction ID that created this output.",
            "example": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z"
          },
          "consumingTxHash": {
            "type": "string",
            "description": "Transaction ID that consumed this output.",
            "example": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c"
          },
          "consumingTxTimestamp": {
            "type": "number",
            "description": "Timestamp in seconds this output is consumed.",
            "example": 1599696000
          },
          "outputIndex": {
            "type": "string",
            "description": "Postion of this output in a list of lexiographically sorted outputs of a transaction.",
            "example": 38
          },
          "timestamp": {
            "type": "number",
            "description": "Timestamp in seconds this outptut is created on.",
            "example": 1599696000
          },
          "locktime": {
            "type": "number",
            "description": "Locktime in seconds after which this output can be consumed.",
            "example": 0
          },
          "threshold": {
            "type": "number",
            "description": "Minimum number of signatures required to consume this output.",
            "example": 1
          },
          "addresses": {
            "description": "Addresses that are eligible to sign the consumption of this output.",
            "example": [
              "avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "credentials": {
            "description": "Credentials that signed the transaction to consume this utxo",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UtxoCredential"
            }
          }
        },
        "required": [
          "utxoId",
          "asset",
          "utxoType",
          "createdOnChainId",
          "consumedOnChainId",
          "creationTxHash",
          "outputIndex",
          "timestamp",
          "locktime",
          "threshold",
          "addresses",
          "credentials"
        ]
      },
      "XChainAssetDetails": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "Unique ID for an asset.",
            "example": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
          },
          "name": {
            "type": "string",
            "description": "Name of this asset.",
            "example": "Avalanche"
          },
          "symbol": {
            "type": "string",
            "description": "Symbol for this asset (max 4 characters).",
            "example": "AVAX"
          },
          "denomination": {
            "type": "number",
            "description": "Denomination of this asset to represent fungibility.",
            "example": 9
          },
          "type": {
            "type": "string",
            "description": "Type of asset like SECP256K1 or NFT.",
            "example": "secp256k1"
          },
          "createdAtTimestamp": {
            "type": "number",
            "description": "Timestamp in seconds this asset was created on.",
            "example": 1675444720
          },
          "cap": {
            "type": "string",
            "description": "Cap represents if an asset can be or is fixed cap.",
            "example": "fixed"
          }
        },
        "required": [
          "assetId",
          "name",
          "symbol",
          "denomination",
          "type",
          "createdAtTimestamp",
          "cap"
        ]
      },
      "TransactionVertexDetail": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "Vertex ID of the vertex this transaction belongs to.",
            "example": "82qPRREHmh8Cfta4PGD6GymY9ZLyvgYugqW6hj9FykpMVRz1S"
          },
          "height": {
            "type": "number",
            "description": "Vertex height of the vertex this transaction belongs to.",
            "example": 1961
          },
          "timestamp": {
            "type": "number",
            "description": "Timestamp in seconds this vertex was accepted.",
            "example": 1600762738
          }
        },
        "required": [
          "hash",
          "height",
          "timestamp"
        ]
      },
      "XChainNonLinearTransaction": {
        "type": "object",
        "properties": {
          "txHash": {
            "type": "string",
            "description": "Unique ID for this transaction.",
            "example": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c"
          },
          "chainFormat": {
            "type": "string",
            "description": "Represents container format this transaction is included in.",
            "enum": [
              "linear",
              "non-linear"
            ],
            "example": "linear"
          },
          "timestamp": {
            "type": "number",
            "description": "Latest timestamp in seconds this transaction was accepted out of the same transaction accepted in other vertices.",
            "example": 1600762738
          },
          "txType": {
            "type": "string",
            "description": "Type of transaction.",
            "example": "BaseTx"
          },
          "memo": {
            "type": "string",
            "description": "Hex encoded memo bytes for this transaction.",
            "example": "0x546865204176616c616e6368652050726f6a656374"
          },
          "consumedUtxos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Utxo"
            }
          },
          "emittedUtxos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Utxo"
            }
          },
          "amountUnlocked": {
            "description": "Assets unlocked by inputs of this transaction.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Asset"
            }
          },
          "amountCreated": {
            "description": "Assets created by outputs of this transaction.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Asset"
            }
          },
          "sourceChain": {
            "type": "string",
            "description": "Source chain for an atomic transaction.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "destinationChain": {
            "type": "string",
            "description": "Destination chain for an atomic transaction.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "assetCreated": {
            "description": "Asset details of the asset created in CreateAssetTx",
            "allOf": [
              {
                "$ref": "#/components/schemas/XChainAssetDetails"
              }
            ]
          },
          "vertices": {
            "description": "A transaction on X-Chain can be accepted over multiple vertices.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionVertexDetail"
            }
          }
        },
        "required": [
          "txHash",
          "chainFormat",
          "timestamp",
          "txType",
          "memo",
          "consumedUtxos",
          "emittedUtxos",
          "amountUnlocked",
          "amountCreated",
          "vertices"
        ]
      },
      "XChainLinearTransaction": {
        "type": "object",
        "properties": {
          "txHash": {
            "type": "string",
            "description": "Unique ID for this transaction.",
            "example": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c"
          },
          "chainFormat": {
            "type": "string",
            "description": "Represents container format this transaction is included in.",
            "enum": [
              "linear",
              "non-linear"
            ],
            "example": "linear"
          },
          "timestamp": {
            "type": "number",
            "description": "Latest timestamp in seconds this transaction was accepted out of the same transaction accepted in other vertices.",
            "example": 1600762738
          },
          "txType": {
            "type": "string",
            "description": "Type of transaction.",
            "example": "BaseTx"
          },
          "memo": {
            "type": "string",
            "description": "Hex encoded memo bytes for this transaction.",
            "example": "0x546865204176616c616e6368652050726f6a656374"
          },
          "consumedUtxos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Utxo"
            }
          },
          "emittedUtxos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Utxo"
            }
          },
          "amountUnlocked": {
            "description": "Assets unlocked by inputs of this transaction.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Asset"
            }
          },
          "amountCreated": {
            "description": "Assets created by outputs of this transaction.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Asset"
            }
          },
          "sourceChain": {
            "type": "string",
            "description": "Source chain for an atomic transaction.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "destinationChain": {
            "type": "string",
            "description": "Destination chain for an atomic transaction.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "assetCreated": {
            "description": "Asset details of the asset created in CreateAssetTx",
            "allOf": [
              {
                "$ref": "#/components/schemas/XChainAssetDetails"
              }
            ]
          },
          "blockHeight": {
            "type": "number",
            "description": "Height of the block this transaction belongs to.",
            "example": 1005
          },
          "blockHash": {
            "type": "string",
            "description": "Hash of the block this transaction belongs to.",
            "example": "82qPRREHmh8Cfta4PGD6GymY9ZLyvgYugqW6hj9FykpMVRz1S"
          }
        },
        "required": [
          "txHash",
          "chainFormat",
          "timestamp",
          "txType",
          "memo",
          "consumedUtxos",
          "emittedUtxos",
          "amountUnlocked",
          "amountCreated",
          "blockHeight",
          "blockHash"
        ]
      },
      "EVMInput": {
        "type": "object",
        "properties": {
          "fromAddress": {
            "type": "string",
            "description": "EVM address from which the asset is exported in ExportTx.",
            "example": "0xD0f2898e49d941D6d479B381d3C8F0bd8d983b4c"
          },
          "asset": {
            "description": "Asset details for the asset being transferred.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Asset"
              }
            ]
          }
        },
        "required": [
          "fromAddress",
          "asset"
        ]
      },
      "CChainExportTransaction": {
        "type": "object",
        "properties": {
          "txHash": {
            "type": "string",
            "description": "Unique ID for this transaction.",
            "example": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c"
          },
          "blockHeight": {
            "type": "number",
            "description": "Height of the block this transaction belongs to.",
            "example": 1005
          },
          "blockHash": {
            "type": "string",
            "description": "Hash of the block this transaction belongs to.",
            "example": "0x57a5cb7704561d1d59bd563b6421021b7563960c05ba3ae0e36fc36917c742ee"
          },
          "timestamp": {
            "type": "number",
            "description": "Latest timestamp in seconds this transaction was accepted.",
            "example": 1600762738
          },
          "memo": {
            "type": "string",
            "description": "Hex encoded memo bytes for this transaction.",
            "example": "0x546865204176616c616e6368652050726f6a656374"
          },
          "amountUnlocked": {
            "description": "Assets unlocked by inputs of this transaction.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Asset"
            }
          },
          "amountCreated": {
            "description": "Assets created by outputs of this transaction.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Asset"
            }
          },
          "sourceChain": {
            "type": "string",
            "description": "Source chain for an atomic transaction.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "destinationChain": {
            "type": "string",
            "description": "Destination chain for an atomic transaction.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "txType": {
            "type": "string",
            "description": "Type of transaction.",
            "enum": [
              "ExportTx"
            ],
            "example": "ExportTx"
          },
          "evmInputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVMInput"
            }
          },
          "emittedUtxos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Utxo"
            }
          }
        },
        "required": [
          "txHash",
          "blockHeight",
          "blockHash",
          "timestamp",
          "memo",
          "amountUnlocked",
          "amountCreated",
          "sourceChain",
          "destinationChain",
          "txType",
          "evmInputs",
          "emittedUtxos"
        ]
      },
      "EVMOutput": {
        "type": "object",
        "properties": {
          "toAddress": {
            "type": "string",
            "description": "EVM address to which the asset is imported in ImportTx",
            "example": "0xD0f2898e49d941D6d479B381d3C8F0bd8d983b4c"
          },
          "asset": {
            "description": "Asset details for the asset being transferred.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Asset"
              }
            ]
          }
        },
        "required": [
          "toAddress",
          "asset"
        ]
      },
      "CChainImportTransaction": {
        "type": "object",
        "properties": {
          "txHash": {
            "type": "string",
            "description": "Unique ID for this transaction.",
            "example": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c"
          },
          "blockHeight": {
            "type": "number",
            "description": "Height of the block this transaction belongs to.",
            "example": 1005
          },
          "blockHash": {
            "type": "string",
            "description": "Hash of the block this transaction belongs to.",
            "example": "0x57a5cb7704561d1d59bd563b6421021b7563960c05ba3ae0e36fc36917c742ee"
          },
          "timestamp": {
            "type": "number",
            "description": "Latest timestamp in seconds this transaction was accepted.",
            "example": 1600762738
          },
          "memo": {
            "type": "string",
            "description": "Hex encoded memo bytes for this transaction.",
            "example": "0x546865204176616c616e6368652050726f6a656374"
          },
          "amountUnlocked": {
            "description": "Assets unlocked by inputs of this transaction.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Asset"
            }
          },
          "amountCreated": {
            "description": "Assets created by outputs of this transaction.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Asset"
            }
          },
          "sourceChain": {
            "type": "string",
            "description": "Source chain for an atomic transaction.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "destinationChain": {
            "type": "string",
            "description": "Destination chain for an atomic transaction.",
            "example": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
          },
          "txType": {
            "type": "string",
            "description": "Type of transaction.",
            "enum": [
              "ImportTx"
            ],
            "example": "ImportTx"
          },
          "evmOutputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EVMOutput"
            }
          },
          "consumedUtxos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Utxo"
            }
          }
        },
        "required": [
          "txHash",
          "blockHeight",
          "blockHash",
          "timestamp",
          "memo",
          "amountUnlocked",
          "amountCreated",
          "sourceChain",
          "destinationChain",
          "txType",
          "evmOutputs",
          "consumedUtxos"
        ]
      },
      "BlockchainId": {
        "type": "string",
        "enum": [
          "p-chain",
          "x-chain",
          "c-chain",
          "11111111111111111111111111111111LpoYY",
          "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
        ]
      },
      "Network": {
        "type": "string",
        "enum": [
          "mainnet",
          "fuji"
        ]
      },
      "ListPChainTransactionsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PChainTransaction"
            }
          }
        },
        "required": [
          "transactions"
        ]
      },
      "ListXChainTransactionsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "transactions": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/XChainNonLinearTransaction"
                },
                {
                  "$ref": "#/components/schemas/XChainLinearTransaction"
                }
              ]
            }
          }
        },
        "required": [
          "transactions"
        ]
      },
      "ListCChainAtomicTransactionsResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "transactions": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/CChainExportTransaction"
                },
                {
                  "$ref": "#/components/schemas/CChainImportTransaction"
                }
              ]
            }
          }
        },
        "required": [
          "transactions"
        ]
      },
      "PChainId": {
        "type": "string",
        "enum": [
          "p-chain",
          "11111111111111111111111111111111LpoYY"
        ]
      },
      "ListPChainUtxosResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "utxos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PChainUtxo"
            }
          }
        },
        "required": [
          "utxos"
        ]
      },
      "ListUtxosResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "utxos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Utxo"
            }
          }
        },
        "required": [
          "utxos"
        ]
      },
      "PChainBalance": {
        "type": "object",
        "properties": {
          "unlockedUnstaked": {
            "description": "A list of objects containing P-chain Asset ID and the amount of that Asset ID. Denotes the amount of unstaked Avax that is consumable by any transaction.",
            "example": [
              {
                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                "amount": "100000000"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PChainAsset"
            }
          },
          "unlockedStaked": {
            "description": "A list of objects containing P-chain Asset ID and the amount of that Asset ID. Denotes the amount of staked Avax that is consumable by any transaction when the staking period ends.",
            "example": [
              {
                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                "amount": "100000000"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PChainAsset"
            }
          },
          "lockedPlatform": {
            "description": "A list of objects containing P-chain Asset ID and the amount of that Asset ID. Denotes the amount of unstaked Avax that is locked at the platform level and not consumable by any transaction at the current time.",
            "example": [
              {
                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                "amount": "100000000"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PChainAsset"
            }
          },
          "lockedStakeable": {
            "description": "A list of objects containing P-chain Asset ID and the amount of that Asset ID. Denotes the amount of unstaked Avax that is locked at the platform level and only consumeable for staking transactions.",
            "example": [
              {
                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                "amount": "100000000"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PChainAsset"
            }
          },
          "lockedStaked": {
            "description": "A list of objects containing P-chain Asset ID and the amount of that Asset ID. Denotes the amount of staked Avax that will be locked when the staking period ends.",
            "example": [
              {
                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                "amount": "100000000"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PChainAsset"
            }
          },
          "lockedUnstaked": {
            "description": "A list of objects containing P-chain Asset ID and the amount of that Asset ID. Denotes the amount of unstaked Avax that is locked. Sum of lockedPlatform and lockedStakeable. TO BE DEPRECATED.",
            "example": [
              {
                "assetId": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
                "amount": "100000000"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PChainAsset"
            }
          }
        }
      },
      "ListPChainBalancesResponse": {
        "type": "object",
        "properties": {
          "balances": {
            "$ref": "#/components/schemas/PChainBalance"
          }
        },
        "required": [
          "balances"
        ]
      },
      "XChainAssetBalance": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "Unique ID for an asset.",
            "example": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
          },
          "name": {
            "type": "string",
            "description": "Name of this asset.",
            "example": "Avalanche"
          },
          "symbol": {
            "type": "string",
            "description": "Symbol for this asset (max 4 characters).",
            "example": "AVAX"
          },
          "denomination": {
            "type": "number",
            "description": "Denomination of this asset to represent fungibility.",
            "example": 9
          },
          "type": {
            "type": "string",
            "description": "Type of asset like SECP256K1 or NFT.",
            "example": "secp256k1"
          },
          "amount": {
            "type": "string",
            "description": "Amount of the asset.",
            "example": "5001000"
          },
          "utxoCount": {
            "type": "number"
          }
        },
        "required": [
          "assetId",
          "name",
          "symbol",
          "denomination",
          "type",
          "amount",
          "utxoCount"
        ]
      },
      "XChainSharedAssetBalance": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "Unique ID for an asset.",
            "example": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
          },
          "name": {
            "type": "string",
            "description": "Name of this asset.",
            "example": "Avalanche"
          },
          "symbol": {
            "type": "string",
            "description": "Symbol for this asset (max 4 characters).",
            "example": "AVAX"
          },
          "denomination": {
            "type": "number",
            "description": "Denomination of this asset to represent fungibility.",
            "example": 9
          },
          "type": {
            "type": "string",
            "description": "Type of asset like SECP256K1 or NFT.",
            "example": "secp256k1"
          },
          "amount": {
            "type": "string",
            "description": "Amount of the asset.",
            "example": "5001000"
          },
          "utxoCount": {
            "type": "number"
          },
          "sharedWithChainId": {
            "type": "string"
          }
        },
        "required": [
          "assetId",
          "name",
          "symbol",
          "denomination",
          "type",
          "amount",
          "utxoCount",
          "sharedWithChainId"
        ]
      },
      "XChainBalances": {
        "type": "object",
        "properties": {
          "locked": {
            "description": "A list of objects containing X-chain Asset balance infromation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/XChainAssetBalance"
            }
          },
          "unlocked": {
            "description": "A list of objects containing X-chain Asset balance infromation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/XChainAssetBalance"
            }
          },
          "atomicMemoryUnlocked": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/XChainSharedAssetBalance"
            }
          },
          "atomicMemoryLocked": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/XChainSharedAssetBalance"
            }
          }
        },
        "required": [
          "locked",
          "unlocked",
          "atomicMemoryUnlocked",
          "atomicMemoryLocked"
        ]
      },
      "ListXChainBalancesResponse": {
        "type": "object",
        "properties": {
          "balances": {
            "$ref": "#/components/schemas/XChainBalances"
          }
        },
        "required": [
          "balances"
        ]
      },
      "CChainSharedAssetBalance": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "Unique ID for an asset.",
            "example": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
          },
          "name": {
            "type": "string",
            "description": "Name of this asset.",
            "example": "Avalanche"
          },
          "symbol": {
            "type": "string",
            "description": "Symbol for this asset (max 4 characters).",
            "example": "AVAX"
          },
          "denomination": {
            "type": "number",
            "description": "Denomination of this asset to represent fungibility.",
            "example": 9
          },
          "type": {
            "type": "string",
            "description": "Type of asset like SECP256K1 or NFT.",
            "example": "secp256k1"
          },
          "amount": {
            "type": "string",
            "description": "Amount of the asset.",
            "example": "5001000"
          },
          "utxoCount": {
            "type": "number"
          },
          "sharedWithChainId": {
            "type": "string"
          }
        },
        "required": [
          "assetId",
          "name",
          "symbol",
          "denomination",
          "type",
          "amount",
          "utxoCount",
          "sharedWithChainId"
        ]
      },
      "CChainAtomicBalances": {
        "type": "object",
        "properties": {
          "atomicMemoryUnlocked": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CChainSharedAssetBalance"
            }
          },
          "atomicMemoryLocked": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CChainSharedAssetBalance"
            }
          }
        },
        "required": [
          "atomicMemoryUnlocked",
          "atomicMemoryLocked"
        ]
      },
      "ListCChainAtomicBalancesResponse": {
        "type": "object",
        "properties": {
          "balances": {
            "$ref": "#/components/schemas/CChainAtomicBalances"
          }
        },
        "required": [
          "balances"
        ]
      },
      "ProposerDetails": {
        "type": "object",
        "properties": {
          "proposerId": {
            "type": "string"
          },
          "proposerParentId": {
            "type": "string"
          },
          "proposerNodeId": {
            "type": "string"
          },
          "proposerPChainHeight": {
            "type": "number"
          },
          "proposerTimestamp": {
            "type": "number"
          }
        }
      },
      "Block": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "type": "string"
          },
          "blockHash": {
            "type": "string"
          },
          "parentHash": {
            "type": "string"
          },
          "blockTimestamp": {
            "type": "number"
          },
          "blockType": {
            "type": "string"
          },
          "txCount": {
            "type": "number"
          },
          "transactions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "blockSizeBytes": {
            "type": "number"
          },
          "proposerDetails": {
            "$ref": "#/components/schemas/ProposerDetails"
          }
        },
        "required": [
          "blockNumber",
          "blockHash",
          "parentHash",
          "blockTimestamp",
          "blockType",
          "txCount",
          "blockSizeBytes"
        ]
      },
      "XChainId": {
        "type": "string",
        "enum": [
          "x-chain",
          "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
        ]
      },
      "XChainVertex": {
        "type": "object",
        "properties": {
          "vertexHash": {
            "type": "string"
          },
          "parentHashes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "vertexHeight": {
            "type": "number"
          },
          "vertexIndex": {
            "type": "number"
          },
          "vertexTimestamp": {
            "type": "number"
          },
          "txCount": {
            "type": "number"
          },
          "transactions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "vertexSizeBytes": {
            "type": "number"
          }
        },
        "required": [
          "vertexHash",
          "parentHashes",
          "vertexHeight",
          "vertexIndex",
          "vertexTimestamp",
          "txCount",
          "transactions",
          "vertexSizeBytes"
        ]
      },
      "ListXChainVerticesResponse": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
          },
          "vertices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/XChainVertex"
            }
          }
        },
        "required": [
          "vertices"
        ]
      },
      "ChainAddressChainIdMap": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "blockchainIds": {
            "$ref": "#/components/schemas/BlockchainId"
          }
        },
        "required": [
          "address",
          "blockchainIds"
        ]
      },
      "ChainAddressChainIdMapListResponse": {
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChainAddressChainIdMap"
            }
          }
        },
        "required": [
          "addresses"
        ]
      }
    }
  }
}
